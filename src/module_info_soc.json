[{"moduleCode": "CS1010", "title": "Programming Methodology", "description": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing.  Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "preclusion": "CS1010E, CS1010J, CS1010S, CS1010X, CS1010XCP, CS1101S", "attributes": {"mpes1": true, "mpes2": true, "su": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-29T01:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 88, "course": "Computer Science"}, {"moduleCode": "CS1010E", "title": "Programming Methodology", "description": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing.  Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "preclusion": "CS1010, CS1010J, CS1010S, CS1010X, CS1010XCP, CS1101S", "attributes": {"mpes1": true, "mpes2": true, "su": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-27T06:30:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-28T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 4, "examDate": "2021-07-30T01:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 78, "course": "Computer Science"}, {"moduleCode": "CS1010J", "title": "Programming Methodology", "description": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing.  Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "preclusion": "CS1010 and its equivalents", "attributes": {"mpes1": true, "su": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 50, "course": "Computer Science"}, {"moduleCode": "CS1010R", "title": "Programming Methodology", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "CG1101, CS1010, CS1010E, CS1101, CS1101C, CZ1102, IT1002, Engineering students", "attributes": {"su": true}, "semesterData": [{"semester": 1, "covidZones": []}, {"semester": 2, "covidZones": []}], "vacancy": 56, "course": "Computer Science"}, {"moduleCode": "CS1010S", "title": "Programming Methodology", "description": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and \nforemost introductory course to computing and is equivalent to CS1010 and CS1010E Programming Methodology. Topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion. This module is appropriate for FoS students.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "preclusion": "CS1010, CS1010E, CS1010J, CS1010X, CS1010XCP, CS1101S", "attributes": {"mpes1": true, "mpes2": true, "su": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T09:00:00.000Z", "examDuration": 90, "covidZones": ["Unknown", "A"]}, {"semester": 2, "examDate": "2021-04-29T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown", "A"]}, {"semester": 3, "covidZones": []}], "vacancy": 56, "course": "Computer Science"}, {"moduleCode": "CS1010X", "title": "Programming Methodology", "description": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing and is equivalent to CS1010, CS1010S and CS1010E Programming Methodology. The module will be taught using the Python programming language and topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "preclusion": "CS1010 or its equivalent, CS1010FC", "attributes": {"mpes2": true, "su": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}, {"semester": 3, "examDate": "2021-06-18T06:30:00.000Z", "examDuration": 120, "covidZones": []}], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS1010XCP", "title": "Programming Methodology", "description": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing and is equivalent to CS1010, CS1010S and CS1010E Programming Methodology. The module will be taught using the Python programming language and topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "preclusion": "CS1010 or its equivalent, CS1010FC", "attributes": {"su": true}, "semesterData": [], "vacancy": 74, "course": "Computer Science"}, {"moduleCode": "CS1020", "title": "Data Structures and Algorithms I", "description": "This module is the second part of a three-part series on introductory programming and problem solving by computing. It continues the introduction that begins in CS1010, and emphasises objectoriented programming with application to simple data structures. Topics include object-oriented problem modeling with objects, classes and methods, object-oriented problem formulation and solving, data structure implementation strageties, abstraction and encapsulation of data structures, object-oriented programming constructs, APIs and class libraries, exception handling, lists, linked lists, stacks, queues, hash tables and their algorithmic design, sorting and searching methods, recursive algorithms, and Big-O notation. This module is appropriate for SoC and FoS students.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "prerequisite": "CS1010 Programming Methodology", "preclusion": "CS1020E, CS2020, CS2030, CS2040, CS2040C", "attributes": {"su": true}, "semesterData": [], "vacancy": 76, "course": "Computer Science"}, {"moduleCode": "CS1020E", "title": "Data Structures and Algorithms I", "description": "This module is the second part of a three-part series on introductory programming and problem solving by computing. It continues the introduction that begins in CS1010, and emphasises objectoriented programming with application to simple data structures. Topics include object-oriented problem modeling with objects, classes and methods, object-oriented problem formulation and solving, data structure implementation strageties, abstraction and encapsulation of data structures, object-oriented programming constructs, APIs and class libraries, exception handling, lists, linked lists, stacks, queues, hash tables and their algorithmic design, sorting and searching methods, recursive algorithms, and Big-O notation. This module is appropriate for FoE students.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "prerequisite": "CS1010E or its equivalent", "preclusion": "CS1020, CS2020, CS2030, CS2040, CS2040C", "attributes": {"su": true}, "semesterData": [], "vacancy": 75, "course": "Computer Science"}, {"moduleCode": "CS1101S", "title": "Programming Methodology", "description": "This module introduces the concepts of programming and computational problem solving, and is the first and foremost introductory module to computing. Starting from a small core of fundamental abstractions, the module introduces programming as a method for communicating computational processes. The module begins with purely functional programming based on a simple substitution-based execution model, and ends with a powerful modern imperative language based on a realistic environment-based execution model. Topics covered include: functional abstraction, recursion, higher-order functions, data abstraction, algorithmic strategies, state mutation, loops and arrays, evaluation strategies, sorting and searching, debugging and testing.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 2, 1, 3, 2], "preclusion": "CS1010 or its equivalents", "attributes": {"mpes1": true, "mpes2": true, "su": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T09:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}, {"semester": 2, "examDate": "2021-04-29T01:00:00.000Z", "examDuration": 120, "covidZones": ["A"]}], "vacancy": 52, "course": "Computer Science"}, {"moduleCode": "CS1105A", "title": "Computing and Society", "description": "", "moduleCredit": "4", "department": "Information Systems and Analytics", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 94, "course": "Computer Science"}, {"moduleCode": "CS1231", "title": "Discrete Structures", "description": "This module introduces mathematical tools required in the study of computer science. Topics include: (1) Logic and proof techniques: propositions, conditionals, quantifications.  (2) Relations and Functions: Equivalence relations and partitions.  Partially ordered sets.  Well-Ordering Principle. Function equality.  Boolean/identity/inverse functions.  Bijection. (3) Mathematical formulation of data models (linear model, trees, graphs). (4) Counting and Combinatoric: Pigeonhole Principle. Inclusion-Exclusion Principle.  Number of relations on a set, number of injections from one finite set to another, Diagonalisation proof: An infinite countable set has an uncountable power set; Algorithmic proof: An infinite set has a countably infinite subset.  Subsets of countable sets are countable.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 1, 0, 3, 3], "prerequisite": "A-level Mathematics or H2 Mathematics or MA1301 or MA1301FC or MA1301X", "preclusion": "MA1100, CS1231S", "attributes": {"mpes1": true, "mpes2": true, "su": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-25T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-05-03T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 61, "course": "Computer Science"}, {"moduleCode": "CS1231R", "title": "Discrete Structures", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "MA1100", "attributes": {"su": true}, "semesterData": [], "vacancy": 79, "course": "Computer Science"}, {"moduleCode": "CS1231S", "title": "Discrete Structures", "description": "This module introduces mathematical tools required in the study of computer science. Topics include: (1) Logic and proof techniques: propositions, conditionals, quantifications. (2) Relations and Functions: Equivalence relations and partitions. Partially ordered sets. Well-Ordering Principle. Function equality. Boolean/identity/inverse functions. Bijection. (3) Mathematical formulation of data models (linear model, trees, graphs). (4) Counting and Combinatoric: Pigeonhole Principle. Inclusion-Exclusion Principle. Number of relations on a set, number of injections from one finite set to another, Diagonalization proof: An infinite countable set has an uncountable power set; Algorithmic proof: An infinite set has a countably infinite subset. Subsets of countable sets are countable.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 1, 0, 3, 3], "prerequisite": "A-level Mathematics or H2 Mathematics or MA1301 or MA1301FC or MA1301X", "preclusion": "MA1100 and CS1231 or its equivalent", "attributes": {"mpes1": true, "mpes2": true, "su": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-25T01:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}, {"semester": 2, "examDate": "2021-05-03T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown", "A"]}], "vacancy": 61, "course": "Computer Science"}, {"moduleCode": "CS1300", "title": "Unrestricted Electives for Poly Candidates", "description": "", "moduleCredit": "8", "department": "SoC Dean's Office", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 59, "course": "Computer Science"}, {"moduleCode": "CS2002", "title": "External Module", "description": "", "moduleCredit": "4", "department": "SoC Dean's Office", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 93, "course": "Computer Science"}, {"moduleCode": "CS2003", "title": "Exchange CS Module", "description": "", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 89, "course": "Computer Science"}, {"moduleCode": "CS2004", "title": "Exchange CS Module", "description": "", "moduleCredit": "1", "department": "SoC Dean's Office", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 52, "course": "Computer Science"}, {"moduleCode": "CS2006", "title": "Exchange CS Module", "description": "", "moduleCredit": "3", "department": "SoC Dean's Office", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 54, "course": "Computer Science"}, {"moduleCode": "CS2010", "title": "Data Structures and Algorithms II", "description": "This module is the third part of a three-part series on introductory programming and problem solving by computing. It continues the introduction in CS1010 and\nCS1020, and emphasises object-oriented programming with application to complex data structures. Topics covered include trees, binary search trees, order property, prefix/infix/postfix expressions, heaps, priority queues, graphs and their algorithmic design, recursive algorithms, problem formulation and problem solving with applications of complex data structures, data structure design principles and implementation strategies, and algorithm analysis. Advanced data structures such as B-trees and AVL trees are also covered.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "prerequisite": "CS1020 or CS1020E or CG1103 Data Structures and Algorithms I", "preclusion": "CS2020, CS2030, CS2040, CS2040C", "semesterData": [], "vacancy": 83, "course": "Computer Science"}, {"moduleCode": "CS2010R", "title": "Data Structures and Algorithms II", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "CG1102, CS1102, CS1102C, CS1102S, CS2020", "semesterData": [], "vacancy": 56, "course": "Computer Science"}, {"moduleCode": "CS2020", "title": "Data Structures and Algorithms Accelerated", "description": "This module is an accelerated version that combines CS1020 and CS2010. It continues the introduction in CS1010, and emphasises object-oriented programming with application to data structures. Topics covered include object-oriented problem modeling with concepts of objects, classes and methods, object-oriented problem formulation and problem solving, data structure design principles and implementation strageties, abstraction and encapsulation of data structures, object-oriented programming constructs, use of APIs and class libraries, exception handling, lists, linked lists, stacks, queues, hash tables, trees, graphs, and their algorithmic design, various forms of sorting and searching methods, recursive algorithms, and algorithm analysis.", "moduleCredit": "6", "department": "Computer Science", "faculty": "Computing", "workload": [4, 2, 2, 4, 3], "prerequisite": "Obtain a grade of at least A- in either CS1010 or CS1101S or CS1010S or CS1010FC or their equivalents", "preclusion": "CS1020, CS1020E, CS2010, CS2030, CS2040, CS2040C", "corequisite": "Obtain a grade of at least A\u2212 in either CS1010 or  CS1101S Programming Methodology", "semesterData": [], "vacancy": 93, "course": "Computer Science"}, {"moduleCode": "CS2030", "title": "Programming Methodology II", "description": "This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using objectoriented design principles and advanced programming constructs available in the two paradigms. Topics include\nobjects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 2, 3, 2], "prerequisite": "CS1010 or its equivalent", "preclusion": "CS2030S", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-30T09:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}, {"semester": 2, "examDate": "2021-04-28T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown", "A"]}, {"semester": 3, "examDate": "2021-06-18T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown", "A"]}], "vacancy": 80, "course": "Computer Science"}, {"moduleCode": "CS2030S", "title": "Programming Methodology II", "description": "This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms. Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 2, 3, 2], "prerequisite": "CS1010 or its equivalent", "preclusion": "CS2030", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-30T09:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}, {"semester": 2, "examDate": "2021-04-28T09:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 76, "course": "Computer Science"}, {"moduleCode": "CS2040", "title": "Data Structures and Algorithms", "description": "This module introduces students to the design and implementation of fundamental data structures and algorithms. The module covers basic data structures (linked lists, stacks, queues, hash tables, binary heaps, trees, and graphs), searching and sorting algorithms, and basic analysis of algorithms.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 1, 3, 3], "prerequisite": "CS1010 or its equivalent", "preclusion": "CS1020, CS1020E, CS2020, CS2010, CS2040C, CS2040S", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-24T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 4, "examDate": "2021-07-30T06:30:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 66, "course": "Computer Science"}, {"moduleCode": "CS2040C", "title": "Data Structures and Algorithms", "description": "This module introduces students to the design and implementation of fundamental data structures and algorithms. The module covers basic data structures (linked lists, stacks, queues, hash tables, binary heaps, trees, and graphs), searching and sorting algorithms, basic analysis of algorithms, and basic object-oriented programming concepts.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 1, 3, 3], "prerequisite": "CS1010 or its equivalent", "preclusion": "CS1020, CS1020E, CS2020, CS2010, CS2040, CS2040S", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-24T05:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS2040S", "title": "Data Structures and Algorithms", "description": "This module introduces students to the design and\nimplementation of fundamental data structures and\nalgorithms. The module covers basic data structures\n(linked lists, stacks, queues, hash tables, binary heaps,\ntrees, and graphs), searching and sorting algorithms, and\nbasic analysis of algorithms.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 1, 2, 2, 2], "prerequisite": "(MA1100 or (CS1231 or its equivalent)) and (CS1010 or its equivalent)", "preclusion": "CS1020, CS1020E, CS2020, CS2010, CS2040, CS2040C", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-24T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown", "A"]}], "vacancy": 58, "course": "Computer Science"}, {"moduleCode": "CS2100", "title": "Computer Organisation", "description": "The objective of this module is to familiarise students with the fundamentals of computing devices. Through this module students will understand the basics of data representation, and how the various parts of a computer work, separately and with each other. This allows students to understand the issues in computing devices, and how these issues affect the implementation of solutions. Topics covered include data representation systems, combinational and sequential circuit design techniques, assembly language, processor execution cycles, pipelining, memory hierarchy and input/output systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 1, 1, 3, 2], "prerequisite": "CS1010 or its equivalent", "preclusion": "CS1104 or Students from Department of ECE", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-27T01:00:00.000Z", "examDuration": 90, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-27T09:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 82, "course": "Computer Science"}, {"moduleCode": "CS2100R", "title": "Computer Organisation", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "CS1104 or Students from Department of ECE", "semesterData": [], "vacancy": 85, "course": "Computer Science"}, {"moduleCode": "CS2101", "title": "Effective Communication for Computing Professionals", "description": "This module aims to equip students with the skills needed to communicate technical information to technical and nontechnical audiences, and to create comprehensible software documentation. A student-centric approach will\nbe adopted to encourage independent and collaborative learning while engaging students in team-based projects. Students will learn interpersonal and intercultural\ncommunication skills as well as hone their oral and written communication skills. Assessment modes include a variety of oral and written communication tasks such as reports, software guides, oral presentations, software demonstrations and project blogs.", "moduleCredit": "4", "department": "Center for Engl Lang Comms", "faculty": "Computing", "workload": [0, 4, 0, 4, 2], "prerequisite": "Students have to complete ES1000 and/or ES1103 (if required to take the module/s) before reading this module.", "preclusion": "CS2103 Software Engineering, IS2101 Business Technical Communication or its equivalent, ES2002, ES2007D, and ES1601.", "corequisite": "Students have to read CS2103T Software Engineering at the same time as this module.", "attributes": {"mpes1": true, "mpes2": true, "su": true}, "semesterData": [{"semester": 1, "covidZones": []}, {"semester": 2, "covidZones": []}], "vacancy": 67, "course": "Computer Science"}, {"moduleCode": "CS2102", "title": "Database Systems", "description": "The aim of this module is to introduce the fundamental concepts and techniques necessary for the understanding and practice of design and implementation of database applications and of the management of data with relational database management systems. The module covers practical and theoretical aspects of design with entity-relationship model, theory of functional dependencies and normalisation by decomposition in second, third and Boyce-Codd normal forms. The module covers practical and theoretical aspects of programming with SQL data definition and manipulation sublanguages, relational tuple calculus, relational domain calculus and relational algebra.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1.5, 0.5, 3, 3], "prerequisite": "((CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or (CS2040 or its equivalent)) \nand (MA1100 or (CS1231 or its equivalent))", "preclusion": "CS2102S, IT2002", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-27T06:30:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-30T01:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 97, "course": "Computer Science"}, {"moduleCode": "CS2102R", "title": "Database Systems", "description": "The aim of this module is to introduce the fundamental concepts and techniques necessary for the understanding and practice of design and implementation of database applications and of the management of data with relational database management systems. The module covers practical and theoretical aspects of design with entity-relationship model, theory of functional dependencies and normalisation by decomposition in second, third and Boyce-Codd normal forms. The module covers practical and theoretical aspects of programming with SQL data definition and manipulation sublanguages, relational tuple calculus, relational domain calculus and relational algebra.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [1, 0, 0, 1, 0.5], "prerequisite": "(CS1020 or its equivalent) and (CS1231 or MA1100)", "preclusion": "CS2102S, IT2002", "semesterData": [], "vacancy": 75, "course": "Computer Science"}, {"moduleCode": "CS2103", "title": "Software Engineering", "description": "This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "(CS1020 or its equivalent) or CS2020 or ((CS2030 or its equivalent) and (CS2040 or its equivalent))", "preclusion": "CS2103T, CS2113, CS2113T", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-02T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-24T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 100, "course": "Computer Science"}, {"moduleCode": "CS2103R", "title": "Software Engineering", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 96, "course": "Computer Science"}, {"moduleCode": "CS2103T", "title": "Software Engineering", "description": "This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "For SoC students only. (CS1020 or its equivalent) or CS2020 or ((CS2030 or its equivalent) and (CS2040 or its equivalent))", "preclusion": "CS2103, CS2113, CS2113T, IS2101 or its equivalent.", "corequisite": "Students have to read CS2101 Effective Communication for Computing Professionals at the same time as this module", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-02T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-24T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 64, "course": "Computer Science"}, {"moduleCode": "CS2104", "title": "Programming Language Concepts", "description": "This module introduces the concepts that serve as a basis for hundreds of programming languages. It aims to provide the students with a basic understanding and appreciation of the various essential programming-languages constructs, programming paradigms, evaluation criteria and language implementation issues. The module covers concepts from imperative, object-oriented, functional, logic, constraints, and concurrent programming. These concepts are illustrated by examples from varieties of languages such as Pascal, C, Java, Smalltalk, Scheme, Haskell, Prolog. The module also introduces various implementation issues, such as pseudo-code interpretation, static and dynamic semantics, abstract machine, type inferencing, etc.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "(CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or CS2113/T", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-25T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown", "A"]}], "vacancy": 60, "course": "Computer Science"}, {"moduleCode": "CS2104R", "title": "Programming Language Concepts", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 84, "course": "Computer Science"}, {"moduleCode": "CS2105", "title": "Introduction to Computer Networks", "description": "This module aims to provide a broad introduction to computer networks and network application programming. It covers the main concepts, the fundamental principles, and the high-level workings of important protocols in each of the Internet protocol layer. Topics include the Web and Web applications, DNS services, socket programming, reliable protocols, transport and network layer protocols, secure communication, LAN, and data communication. Practical assignments and handson exercises expose students to network application programming and various networking tools and utilities.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "(CS1020 or its equivalent) or CS2020 or (CS2040 or its equivalents)", "preclusion": "IT2001, EE3204/E, EE4204/E, EE4210/E. CEG, CPE and EEE students are not allowed to take this module.", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-30T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-29T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 84, "course": "Computer Science"}, {"moduleCode": "CS2105R", "title": "Introduction to Computer Networks", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 94, "course": "Computer Science"}, {"moduleCode": "CS2106", "title": "Introduction to Operating Systems", "description": "This module introduces the basic concepts in operating systems and links it with contemporary operating systems (eg. Unix/Linux and Windows). It focuses on OS structuring and architecture, processes, memory management, concurrency and file systems. Topics include kernel architecture, system calls, interrupts, models of processes, process abstraction and services, scheduling, review of physical memory and memory management hardware, kernel memory management, virtual memory and paging, caches, working set, deadlock, mutual exclusion, synchronisation mechanisms, data and metadata in file systems, directories and structure, file system abstraction and operations, OS protection mechanisms, and user authentication.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 0, 6], "prerequisite": "CS2100 or EE2007 or EE2024 or EE2028", "preclusion": "CG2271 or EE4214. CEG students are not allowed to take this module.", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-25T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-05-04T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 60, "course": "Computer Science"}, {"moduleCode": "CS2106R", "title": "Introduction to Operating Systems", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "CG2271 or EE4214. CEG students are not allowed to take this module.", "semesterData": [], "vacancy": 53, "course": "Computer Science"}, {"moduleCode": "CS2107", "title": "Introduction to Information Security", "description": "This module serves as an introductory module on information security. It illustrates the fundamentals of how systems fail due to malicious activities and how they can be protected. The module also places emphasis on the practices of secure programming and implementation. Topics covered include classical/historical ciphers, introduction to modern ciphers and cryptosystems, ethical, legal and organisational aspects, classic examples of direct attacks on computer systems such as input validation vulnerability, examples of other forms of attack such as social engineering/phishing attacks, and the practice of secure programming.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS1010 or its equivalence", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-26T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-05-04T09:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 99, "course": "Computer Science"}, {"moduleCode": "CS2108", "title": "Introduction to Media Computing", "description": "This module introduces students to (i) the fundamental principles, theory, algorithms, and data structures behind digital representation, compression, synchronization, and processing of image, audio, and video data types, and (ii) challenges and issues in developing media-rich applications, such as media streaming and media retrieval. Students will be exposed to the workings of common media file format and common manipulation techniques on media data. After taking the module, students should be confident enough in developing media applications and make appropriate trade-off and design decisions when dealing in media data in their software.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "(CS1020 or its equivalent) or CS2020 or (CS2040 or its equivalent)", "preclusion": "CS3246", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["Unknown", "A"]}], "vacancy": 95, "course": "Computer Science"}, {"moduleCode": "CS2113", "title": "Software Engineering & Object-Oriented Programming", "description": "This module introduces the necessary skills for systematic and rigorous development of software systems. It covers requirements, design, implementation, quality assurance, and project management aspects of small-to-medium size multi-person software projects. The module uses the Object Oriented Programming paradigm. Students of this module will receive hands-on practice of tools commonly used in the industry, such as test automation tools, build automation tools, and code revisioning tools will be covered.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS2040C or ((CS2030 or its equivalent) and CS2040/S)", "preclusion": "CS2103, CS2103T, (CS2113T for CS2113), (CS2113 for CS2113T)", "corequisite": "CS2101 Effective Communication for Computing Professionals is co-requisite for CS2113T. Students exempted from CS2101 will take CS2113 which does not have CS2101 as co-req. Otherwise, CS2113 and CS2113T are identical.", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-01T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-29T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 63, "course": "Computer Science"}, {"moduleCode": "CS2113T", "title": "Software Engineering & Object-Oriented Programming", "description": "This module introduces the necessary skills for systematic and rigorous development of software systems. It covers requirements, design, implementation, quality assurance, and project management aspects of small-to-medium size multi-person software projects. The module uses the Object Oriented Programming paradigm. Students of this module will receive hands-on practice of tools commonly used in the industry, such as test automation tools, build automation tools, and code revisioning tools will be covered.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS2040C or ((CS2030 or its equivalent) and CS2040/S)", "preclusion": "CS2103, CS2103T, (CS2113T for CS2113), (CS2113 for CS2113T)", "corequisite": "CS2101 Effective Communication for Computing Professionals is co-requisite for CS2113T. Students exempted from CS2101 will take CS2113 which does not have CS2101 as co-req. Otherwise, CS2113 and CS2113T are identical.", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-01T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-29T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 87, "course": "Computer Science"}, {"moduleCode": "CS2220", "title": "Introduction to Computational Biology", "description": "This course aims to develop flexible and logical problem solving skills, understanding of main bioinformatics problems, and appreciation of main techniques and approaches to bioinformatics. Through case studies and hands-on exercises, the student will (i) master the basic tools and approaches for analysis of DNA sequences, protein sequences, gene expression profiles, etc. (ii) understand important problems and applications of computational biology, including identifying functional features in DNA and protein sequences, predicting protein function, and deriving diagnostic models from gene expression profiles, (iii) be confident to propose new solutions to both existing and emerging problems in computational biology.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "(CS1020 or its equivalent) or CS2020 or  (CS2040 or its equivalent)", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-30T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 57, "course": "Computer Science"}, {"moduleCode": "CS2220R", "title": "Introduction to Computational Biology", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 73, "course": "Computer Science"}, {"moduleCode": "CS2309", "title": "CS Research Methodology", "description": "", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "(CS2010 or its equivalent) or CS2020 or ((CS2030 or its equivalent) or CS2113/T) and (CS2040 or its equivalent))\nand \n(MA1100 or (CS1231 or its equivalent))", "preclusion": "CS2305S", "attributes": {"mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["A"]}], "vacancy": 85, "course": "Computer Science"}, {"moduleCode": "CS3001", "title": "External Module", "description": "", "moduleCredit": "4", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 65, "course": "Computer Science"}, {"moduleCode": "CS3002", "title": "Exchange CS Module", "description": "", "moduleCredit": "4", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 78, "course": "Computer Science"}, {"moduleCode": "CS3003", "title": "Exchange CS Module", "description": "", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "semesterData": [], "vacancy": 54, "course": "Computer Science"}, {"moduleCode": "CS3004", "title": "Exchange CS Module", "description": "", "moduleCredit": "1", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 64, "course": "Computer Science"}, {"moduleCode": "CS3005", "title": "Exchange CS Module", "description": "", "moduleCredit": "2", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS3006", "title": "Exchange CS Module", "description": "", "moduleCredit": "3", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS3103", "title": "Computer Networks Practice", "description": "This module aims to provide an opportunity for the students to learn commonly-used network protocols in greater technical depth with their implementation details than a basic networking course. Students will perform hands-on experiments in configuring and interconnecting LANs using networking devices/technologies (e.g., routers, switches, SDN switches, and hubs), networking protocols (e.g., DHCP, DNS, RIP, OSPF, ICMP, TCP, UDP, wireless LAN, VLAN protocols, SIP, SSL, IPSec-VPN) and networking tools (e.g, tcpdump, netstat, ping, traceroute). Students will learn higher-layer network protocols and develop network applications (client/server, P2P) via socket programming.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 2, 4, 2], "prerequisite": "CS2105 or EE3204/E or EE4204", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS3201", "title": "Software Engineering Project I", "description": "This module is the first part of a two-part series on the practice of software engineering in Software Development Life Cycle (SDLC). These two modules together provide the students with hands-on experience in working in project groups through a complete SDLC to develop a well-designed, welltested, large-scaled software system. This first part focuses on applying best software engineering practices on the analysis and design of software system. The students will practice analysis of user\u2019s\nneeds, formulation of computing requirements to meet the user\u2019s needs, modeling and design of the computer systems according to the requirements, and evaluation of the design.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [1, 1, 0, 5, 3], "prerequisite": "(CS2103 or its equivalent) and (CS2101 or IS2101)", "preclusion": "CS3215", "corequisite": "CS3202 Software Engineering Project II", "semesterData": [], "vacancy": 80, "course": "Computer Science"}, {"moduleCode": "CS3201R", "title": "Software Engineering Project I", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "CS3215", "corequisite": "CS3202 Software Engineering Project II", "semesterData": [], "vacancy": 70, "course": "Computer Science"}, {"moduleCode": "CS3202", "title": "Software Engineering Project II", "description": "This module is the second part of a two-part series on the practice of software engineering in Software Development Life Cycle (SDLC). These two modules together provide the students with hands-on experience in working in project groups through a complete SDLC to develop a well-tested, large-scaled software system. This second part focuses on applying best software engineering practices on the implementation and testing of the software system. The students will practice efficient implementation of software components, system integration, software version control, and rigorous testing.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [1, 1, 0, 5, 3], "prerequisite": "CS2103 Software Engineering or its equivalent.", "preclusion": "CS3215 Software Engineering Project", "corequisite": "CS3201 Software Engineering Project I", "semesterData": [], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS3202R", "title": "Software Engineering Project II", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "CS3215 Software Engineering Project", "semesterData": [], "vacancy": 68, "course": "Computer Science"}, {"moduleCode": "CS3203", "title": "Software Engineering Project", "description": "This module provides students with hands-on experience in\nworking in project groups through a complete SDLC to\ndevelop a well-designed, well-tested, large-scaled software\nsystem. The students will apply the current best software\nengineering practices on the analysis, design,\nimplementation, and testing of software system. Through\nthe project, students will practise analysis of user\u2019s needs,\nformulation of computing requirements to meet the user\u2019s\nneeds, modelling and design of the computer systems\naccording to the requirements, evaluation of the design,\nefficient implementation of software components, system\nintegration, software version control, and rigorous testing.", "moduleCredit": "8", "department": "Computer Science", "faculty": "Computing", "workload": [2, 2, 0, 10, 6], "prerequisite": "(CS2103/T or CS2113/T)", "preclusion": "CS3201, CS3202", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}, {"semester": 2, "covidZones": ["Unknown"]}, {"semester": 3, "covidZones": []}], "vacancy": 75, "course": "Computer Science"}, {"moduleCode": "CS3210", "title": "Parallel Computing", "description": "The aim of this module is to provide an introduction to the field of parallel computing with hands-on parallel programming experience on real parallel machines. The module is divided into four parts: parallel computation models and parallelism, parallel architectures, parallel algorithm design and programming, and new parallel computing models. Topics includes: theory of parallelism and models; shared-memory architectures; distributed-memory architectures; data parallel architectures; interconnection networks, topologies and basic of communication operations; principles of parallel algorithm design; performance\nand scalability of parallel programs, overview of new parallel computing models such as grid, cloud, GPGPU.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS2100 or CG2007 or CG2028 or EE2024 or EE2028", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-30T01:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 53, "course": "Computer Science"}, {"moduleCode": "CS3211", "title": "Parallel and Concurrent Programming", "description": "A concurrent system consists of a set of processes that executes simultaneously and that may collaborate by communicating and synchronising with one another. Examples of concurrent systems are parallel programs that describe sets of collaborating processes. This module introduces the design, development and debugging of parallel programs. It will build on the concurrency concepts gained from the Operating Systems module. It covers concepts and modelling tools for specifying and reasoning (about the properties of) concurrent systems and parallel programs. It also covers principles of performance analysis, asynchronous and asynchronous parallel programming, and engineering concurrent systems and parallel programs.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "CS2106 or CG2271", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-05-05T01:00:00.000Z", "examDuration": 120, "covidZones": ["A"]}], "vacancy": 56, "course": "Computer Science"}, {"moduleCode": "CS3216", "title": "Software Product Engineering for Digital Markets", "description": "In this module, students will practice software product engineering by working in small teams to develop well-tested, user-friendly, production-quality software for the real world. To support this goal, students work closely with users to understand their problems, gather their requirements, and obtain their feedback through a rapid, iterative, application design and development process. Students will also be exposed to practical issues for digital markets such as growing the user base of their application, deployment of the application on the Web or in the cloud system, and validating the UI design and UX of the application.", "moduleCredit": "5", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 8, 2], "prerequisite": "CS2103 or its equivalent or with special approval from instructor. Students will submit personal statements to apply for a place in the course instead of bidding through the CORS system.", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 65, "course": "Computer Science"}, {"moduleCode": "CS3217", "title": "Software Engineering on Modern Application Platforms", "description": "This module introduces students to the practice of software engineering on modern application platforms such as mobile devices, the Web and cloud systems. Students will work in small project teams to develop well-tested,\nproduction-quality software. This module focuses on building core software engineering skills and competencies in programming modern application platforms. It also trains students to work well in project teams. Students will be\nassessed on both their individual programming competencies and their software enginnering skills in final team project.", "moduleCredit": "5", "department": "Computer Science", "faculty": "Computing", "workload": [1, 1, 0, 9, 2], "prerequisite": "CS2103 or its equivalent or with special approval from instructor. Students will submit personal statements to apply for a place in the course instead of bidding through the CORS system.", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 64, "course": "Computer Science"}, {"moduleCode": "CS3218", "title": "Multimodal Processing in Mobile Platforms", "description": "Modern mobile platforms such as smart phones and tablets are equipped with an increasing number of sensing modalities. In addition to traditional components such as keyboards and touch screens, they are also equipped with cameras, microphones, inertial sensor, and GPS receivers. With these modalities all packed into a single platform, it is important to empower application developers with basic knowledge and practical skills in dealing with these modalities. This module introduces the students to basic theories, concept and practical skills needed in input, processing and output of multimodal data on mobile platforms.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 2, 4], "prerequisite": "((CS1020 or its equivalent) or \n(CS2030 or its equivalent) or \n(CS2040 or its equivalent)) and \n(MA1101R or MA1311 or MA1508E or MA1513) and \n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521)", "semesterData": [], "vacancy": 74, "course": "Computer Science"}, {"moduleCode": "CS3219", "title": "Software Engineering Principles and Patterns", "description": "This module provides an in-depth, hands-on experience in key aspects of software engineering that accompany the development of software. Based on proven principles and best practices, this module focuses on software architectural design from the perspective of the software process. It covers techniques for requirement elicitation and specification that provide sound base for architectural design. The module covers design decision exploration as well as patterns that explicate principles and best practices in replicable form.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS2103 or its equivalent", "preclusion": "CS3213 Software Systems Design", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 52, "course": "Computer Science"}, {"moduleCode": "CS3219R", "title": "Software Engineering Principles and Patterns", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "CS3213 Software Systems Design", "semesterData": [], "vacancy": 59, "course": "Computer Science"}, {"moduleCode": "CS3220", "title": "Computer Architecture", "description": "The objective of this module is concerned with design techniques involving the use of parallelism to improve the performance of computer systems. The module is divided into three parts. Part I considers the fundamental methods to improve the performance of single processor systems. Topics include the design principle of instruction set, memory hierarchy, pipeline design techniques, RISC and vector computer. In Part II, multi-processor systems using shared memory are examined in detail, and Part III, multi-processor systems that do not use shared memory are examined.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "CS2106", "preclusion": "EEE & CPE students are not allowed to take this module as cfm/breadth.", "semesterData": [], "vacancy": 54, "course": "Computer Science"}, {"moduleCode": "CS3221", "title": "Operating Systems Design and Pragmatics", "description": "This module builds upon the conceptual foundation formed in CS2106 and extends it to the study of real-life operating systems. The focus is to understand how actual operating systems work including the pragmatics, system architecture and design and implementation. Details will be drawn from contemporary operating systems such as Unix/Linux and Windows. Topics include kernel architecture and interfaces, computer architecture issues, process APIs and implementation, threads, scheduling, physical and kernel memory management, virtual memory, synchronisation and interprocess communication mechanisms, multi-processor issues, device characteristics and management, file system implementation, memory mapped files, special purpose file systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "(CS1020 or its equivalent) and CS2106", "semesterData": [], "vacancy": 59, "course": "Computer Science"}, {"moduleCode": "CS3223", "title": "Database Systems Implementation", "description": "This system-oriented module provides an in-depth study of the concepts and implementation issues related to database management systems. It first covers the physical implementation of the relational data model, which includes storage management, access methods, query processing, and optimisation. Then it covers issues and techniques dealing with multi-user application environments, namely, transactions, concurrency control, and recovery. The third part covers advanced topics such as on-line analytical processing, in-memory databases, and column stores.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (CS2102 or IT2002)", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-04-28T05:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 76, "course": "Computer Science"}, {"moduleCode": "CS3223R", "title": "Database Systems Implementation", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 87, "course": "Computer Science"}, {"moduleCode": "CS3225", "title": "Combinatorial Methods in Bioinformatics", "description": "After the complete sequencing of a number of genomes, we are in the stage to understand the mystery of our body, that is, we need to understand the information encoded in the genome and its relationship with RNA and protein. This aim of this module is to cover algorithms related to this stage.  In the module, we will cover the algorithms related to genome annotation, motif identification, proteomics, population genetics, microarray, etc.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "(CS2010 or CS2020 or CS2040 or CS2040C) and (CS2220 or LSM2104)", "semesterData": [], "vacancy": 93, "course": "Computer Science"}, {"moduleCode": "CS3226", "title": "Web Programming and Applications", "description": "This module introduces students to software development on the Web platforms. Students will be exposed to important computer science concepts, including networking, databases, computer security, user interface design, programming languages, and software engineering. These concepts will be tied together through hands-on practice in building a Web-based application using the current Web development technology. At the end of the module, students are expected to be able to design and develop a Web application, to appreciate the underlying technology needed to build a Web application, and to develop a fundamental understanding of related computer science concepts.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 2, 2, 4], "prerequisite": "CS2010 or CS2020 or (CS2030 or its equivalent) or CS2113/T", "preclusion": "CP3101B", "semesterData": [], "vacancy": 71, "course": "Computer Science"}, {"moduleCode": "CS3230", "title": "Design and Analysis of Algorithms", "description": "This module introduces different techniques of designing and analysing algorithms. Students will learn about the framework for algorithm analysis, for example, lower bound arguments, average case analysis, and the theory of NP-completeness. In addition, students are exposed to various algorithm design paradigms. The module serves two purposes: to improve the students' ability to design algorithms in different areas, and to prepare students for the study of more advanced algorithms. The module covers lower and upper bounds, recurrences, basic algorithm paradigms (such as prune-and-search, dynamic programming, branch-and-bound, graph traversal, and randomised approaches), amortized analysis, NP-completeness, and some selected advanced topics.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (MA1100 or (CS1231 or its equivalent))", "preclusion": "EEE and CPE students can only take this module as a technical elective to satisfy the program requirements or UEM but not CFM/ULR-Breadth.", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-01T09:00:00.000Z", "examDuration": 150, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-29T05:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 91, "course": "Computer Science"}, {"moduleCode": "CS3230R", "title": "Design and Analysis of Algorithms", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read host module. Student selection process is enforced.", "semesterData": [{"semester": 1, "covidZones": []}, {"semester": 2, "covidZones": []}], "vacancy": 60, "course": "Computer Science"}, {"moduleCode": "CS3231", "title": "Theory of Computation", "description": "This module examines fundamental aspects of computation that every computer scientist should know. What is a finite automaton and how does it relate to regular expressions (and searching a database)? What is a context-free language and how does it relate to parsing languages? What is the P vs. NP problem and why does it matter? How do we decide if a problem is easy or hard? This module introduces techniques for precisely formulating problems and studying their properties using a variety of commonly used reasoning techniques (e.g., model equivalence, non-determinism, digitalisation, simulation and reduction).", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "(CS1231 or equivalent) and (CS2040 or its equivalent)", "attributes": {"mpes1": true}, "semesterData": [], "vacancy": 61, "course": "Computer Science"}, {"moduleCode": "CS3233", "title": "Competitive Programming", "description": "This module aims to prepare students in competitive problem solving. It covers techniques for attacking and solving challenging computational problems. Fundamental algorithmic solving techniques covered include divide and conquer, greedy, dynamic programming, backtracking and branch and bound. Domain specific techniques like number theory, computational geometry, string processing and graph theoretic will also be covered. Advanced AI search techniques like iterative deepening, A* and heuristic search will be included.  The module also covers algorithmic and programming language toolkits used in problem solving supported by the solution of representative or well-known problems in the various algorithmic paradigms.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "At least grade A- in (CS2010 or CS2020 or (both CS2030 and CS2040)) or special permission", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 70, "course": "Computer Science"}, {"moduleCode": "CS3233R", "title": "Competitive Programming", "description": "This module aims to prepare students in competitive problem solving. It covers techniques for attacking and solving challenging computational problems. Fundamental algorithmic solving techniques covered include divide and conquer, greedy, dynamic programming, backtracking and branch and bound. Domain specific techniques like number theory, computational geometry, string processing and graph theoretic will also be covered. Advanced AI search techniques like iterative deepening, A* and heuristic search will be included.  The module also covers algorithmic and programming language toolkits used in problem solving supported by the solution of representative or well-known problems in the various algorithmic paradigms.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [{"semester": 2, "covidZones": []}], "vacancy": 83, "course": "Computer Science"}, {"moduleCode": "CS3234", "title": "Logic for Proofs and Programs", "description": "This module introduces logic as a means for specifying and solving computational problems. It explores how logic can be used to represent computational problems, how these representations can be proven correct, and how they can be executed on a computer. Students learn about logic as formal systems (semantic, axiomatic, and deductive) and how to write proofs in the different systems. They also learn how to use a proof assistant such as Coq and how to program in a logic programming language such as Prolog.  Topics include classical and intuitionistic logic, SAT, Peano\u2019s axioms, Hoare logic, and other selected logic systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "MA1100 or (CS1231 or its equivalent); Programming experience is preferred.", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 99, "course": "Computer Science"}, {"moduleCode": "CS3234R", "title": "Logic and Formal Systems", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 95, "course": "Computer Science"}, {"moduleCode": "CS3235", "title": "Computer Security", "description": "The objective of this module is to provide a broad understanding of computer security with some indepth discussions on selected topics in system and network security. This module covers the following topics: intrusion detection, DNS security, electronic mail security, authentication, access control, buffer overflow, memory and stack protection, selected topics in application security, for instance, web security, and well-known attacks.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "(CS2105 or EE3204 or EE4204) and (CS2106 or CG2271) and CS2107", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}, {"semester": 2, "covidZones": ["Unknown", "A"]}], "vacancy": 57, "course": "Computer Science"}, {"moduleCode": "CS3236", "title": "Introduction to Information Theory", "description": "This module introduces the basics of modern information theory. It covers how information can be quantified, and what this quantification tells us about how well we can compress and transmit information without error. It discusses basic error correcting techniques, and information-theoretic cryptography. Topics covered\ninclude: mathematical techniques, entropy measures, fundamental limits to data compression and noisy-channel coding, examples of error-correcting codes, examples of information theoretic cryptography (commitments, secure computation, key distribution, randomness extraction).", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "(MA1100 or (CS1231 or its equivalent)) and \n(EE2012/A or MA2216 or ST2131 or ST2334)", "attributes": {"mpes2": true}, "semesterData": [], "vacancy": 57, "course": "Computer Science"}, {"moduleCode": "CS3236R", "title": "Introduction to Information Theory", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "same as CS3236", "semesterData": [{"semester": 1, "covidZones": []}], "vacancy": 86, "course": "Computer Science"}, {"moduleCode": "CS3237", "title": "Introduction to Internet of Things", "description": "The Internet of Things (IoT), where a large number of physical objects embedded with computing power and sensors connect to the network for seamless cooperation between the cyber domain and the physical world, is revolutionizing our lives. This module will serve as an introduction to the IoT and provide a holistic view of the entire spectrum of the IoT system architecture from the devices to the fog and the cloud computing. The focus will be on designing IoT systems that balance both the functional and non-functional (communication bandwidth, security, safety, power) requirements. The module will have a significant project component.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 2, 3, 3], "prerequisite": "(CS1010 or equivalent) and (CG2028 or CS2100 or EE2024 or EE2028)", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 65, "course": "Computer Science"}, {"moduleCode": "CS3240", "title": "Interaction Design", "description": "This course is intended for students in computing and related disciplines whose work focuses on human-computer interaction issues in the design of computer systems. The course stresses the importance of user-centred design and usability in the development of computer applications and systems. Students will be taken through the analysis, design, development, and evaluation of human-computer interaction methods for computer systems. They will acquire hands-on design skills through laboratory exercises and assignments. The course also covers HCI design principles and emphasizes the importance of contextual, organisational, and social factors in system design.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "prerequisite": "(CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or CS2113/T or NM3209 or NM2207/Y", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}, {"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 63, "course": "Computer Science"}, {"moduleCode": "CS3240R", "title": "Interaction Design", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 89, "course": "Computer Science"}, {"moduleCode": "CS3241", "title": "Computer Graphics", "description": "This module teaches some graphics hardware devices, reviews the mathematics related to the understanding, and discusses the fundamental areas of computer graphics. After completing the course, students are expected to understand the basic computer graphics terminology and concepts, and to be able to design and implement simple 2D and 3D interactive computer graphics related programs. As an enrichment part of the course, students are introduced the state-of-the-art development in computer graphics by viewing interesting video clips and experimenting with demo program made available in the course web.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "(CS2010 or its equivalent) or CS2020 or (((CS2030 or its equivalent) or CS2113/T) and ((CS2040 or its equivalent)))", "preclusion": "EEE and CPE students can only take this module as a technical elective to satisfy the program requirements or UEM but not CFM/ULR-Breadth.", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 88, "course": "Computer Science"}, {"moduleCode": "CS3241R", "title": "Computer Graphics", "description": "This module teaches some graphics hardware devices, reviews the mathematics related to the understanding, and discusses the fundamental areas of computer graphics. After completing the course, students are expected to understand the basic computer graphics terminology and concepts, and to be able to design and implement simple 2D and 3D interactive computer graphics related programs. As an enrichment part of the course, students are introduced the state-of-the-art development in computer graphics by viewing interesting video clips and experimenting with demo program made available in the course web.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [{"semester": 1, "covidZones": []}], "vacancy": 79, "course": "Computer Science"}, {"moduleCode": "CS3242", "title": "3D Modeling and Animation", "description": "This module aims to provide fundamental concepts in 3D modeling and animation. It also serves as a bridge to advanced media modules. After taking this module, students should be able to use these concepts to easily build or work with digital models, manipulate the models by means of computer deformation and animation, and use lighting and rendering techniques to create appealing scenes. Topics include coordinate spaces, transforms, 3D model representations, hierarchical structures, deformation, procedural modelling, particle systems, character animation, shading networks, lighting, and scripting concepts.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "prerequisite": "CS3241 and (PC1221 or PC1221X) and \n(MA1101R or MA1311 or MA1508E or MA1513) and \n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521)", "preclusion": "CS4342", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-04-26T01:00:00.000Z", "examDuration": 120, "covidZones": ["A"]}], "vacancy": 91, "course": "Computer Science"}, {"moduleCode": "CS3243", "title": "Introduction to Artificial Intelligence", "description": "The module introduces the basic concepts in search and knowledge representation as well as to a number of sub-areas of artificial intelligence. It focuses on covering the essential concepts in AI. The module covers Turing test, blind search, iterative deepening, production systems, heuristic search, A* algorithm, minimax and alpha-beta procedures, predicate and first-order logic, resolution refutation, non-monotonic reasoning, assumption-based truth maintenance systems, inheritance hierarchies, the frame problem, certainly factors, Bayes' rule, frames and semantic nets, planning, learning, natural language, vision, and expert systems and LISP.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent))\nand (MA1100 or (CS1231 or its equivalent))", "preclusion": "EEE and CPE students can only take this module as a technical elective to satisfy the program requirements or UEM but not CFM/ULR-Breadth.", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-25T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "covidZones": ["A", "Unknown"]}], "vacancy": 91, "course": "Computer Science"}, {"moduleCode": "CS3243R", "title": "Introduction to Artificial Intelligence", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "EEE and CPE students can only take this module as a technical elective to satisfy the program requirements or UEM but not CFM/ULR-Breadth.", "semesterData": [], "vacancy": 88, "course": "Computer Science"}, {"moduleCode": "CS3244", "title": "Machine Learning", "description": "This module introduces basic concepts and algorithms in machine learning and neural networks. The main reason for studying computational learning is to make better use of powerful computers to learn knowledge (or regularities) from the raw data. The ultimate objective is to build self-learning systems to relieve human from some of already-too-many programming tasks. At the end of the course, students are expected to be familiar with the theories and paradigms of computational learning, and capable of implementing basic learning systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "(CS2010 or CS2020 or CS2040 or its equivalent) and \n(MA1101R or MA1311 or MA1508E or MA1513) and \n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521) and \n(EE2012/A or MA2216 or ST2131 or ST2334)", "preclusion": "BT4240, DMX1401AI or its equivalents, IT3011", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-05-03T09:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 86, "course": "Computer Science"}, {"moduleCode": "CS3244R", "title": "Machine Learning", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 52, "course": "Computer Science"}, {"moduleCode": "CS3245", "title": "Information Retrieval", "description": "This module discusses the basic concepts and methods of information retrieval including capturing, representing, storing, organizing, and retrieving unstructured or loosely structured information. The most well-known aspect of information retrieval is document retrieval: the process of indexing and retrieving text documents. However, the field of information retrieval includes almost any type of\nunstructured or semi-structured data, including newswire stories, transcribed speech, email, blogs, images, or video. Therefore, information retrieval is a critical aspect of Web search engines. This module also serves as the foundation for subsequent modules on the understanding, processing and retrieval of particular web media.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 5, 2], "prerequisite": "(CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-04-30T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown", "A"]}], "vacancy": 77, "course": "Computer Science"}, {"moduleCode": "CS3245R", "title": "Information Retrieval", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [{"semester": 1, "covidZones": []}], "vacancy": 80, "course": "Computer Science"}, {"moduleCode": "CS3247", "title": "Game Development", "description": "The objective of this module is to introduce techniques for electronic game design and programming. This module covers a range of important topics including 3D maths, game physics, game AI, sound, as well as user interface for computer games. Furthermore, it will give an overview of computer game design to the students. Through laboratory programming exercises, the students will have hands-on programming experience with popular game engines and will develop basic games using those engines.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "prerequisite": "CS3241", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 100, "course": "Computer Science"}, {"moduleCode": "CS3249", "title": "User Interface Development", "description": "This module aims at providing students with technical skills and hands-on experience of user interface development. It focuses on the design and implementation of user interfaces in general, including graphical user interface. It covers essential topics including user interface models, psychology of humans and computers, user interface style, layout guidelines, GUI programming with widget toolkits, interaction models, event handling, multithreading, interacting with multimedia hardware, usability testing. Selected advanced topics such as geometric transformation, and 3D user interfaces, multiple-user interaction and real-time interaction are also covered.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "prerequisite": "CS2103 or its equivalent", "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 80, "course": "Computer Science"}, {"moduleCode": "CS3271", "title": "Software Engineering for Reactive Systems", "description": "Reactive systems are real-time systems that continuously interact with the environment. This module introduces students to the software engineering principles for designing systems such as controllers and signal processors that are used in a wide variety of settings, including industrial plants, chemical reactors, flight and automotive controllers and robots. Topics to be covered will include fundamentals of control software, programming languages for real-time controllers, and verification and optimisation of software for digital control systems. Apart from a variety of programming assignments, this course will also introduce students to some relevant research topics in this area.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 2, 3, 2], "prerequisite": "CG2271 or CS2271", "preclusion": "EE3304, EE/CPE students", "semesterData": [], "vacancy": 63, "course": "Computer Science"}, {"moduleCode": "CS3281", "title": "Thematic Systems Project I", "description": "This module is the first part of a two-part series on the development of large-scaled computer systems to solve real-world problems under specific themes such as healthcare, security and surveillance, tourism, etc. Students with complementary technical expertise will form project teams to work on real-world projects under the supervision of CS professors and industrial partners. This\nfirst part focuses on the analysis of the real-world problems, formulation of the computing requirements of the desired solution that meets the user\u2019s needs, design of the computer systems according to the requirements, and evaluation of the design.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 2, 0, 4, 2], "prerequisite": "(CS2103 or its equivalent) and have passed at least one primary module in a CS focus area. Student selection process will be enforced.", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 87, "course": "Computer Science"}, {"moduleCode": "CS3281R", "title": "Thematic Systems Project I", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 75, "course": "Computer Science"}, {"moduleCode": "CS3282", "title": "Thematic Systems Project II", "description": "This module is the second part of a two-part series on the development of large-scaled computer systems to solve real-world problems under specific themes such as healthcare, security and surveillance, tourism, etc. Students with complementary technical expertise will form project teams to work on real-world projects under the supervision of CS professors and industrial partners. This\nsecond part focuses on the development of algorithms required for the systems, implementation and testing of the algorithms and the systems, and evaluation of the systems according to the users\u2019 requirements.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 2, 0, 4, 2], "prerequisite": "CS3281 and have passed at least two primary modules in a CS focus area. Student selection process will be enforced.", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 61, "course": "Computer Science"}, {"moduleCode": "CS3282R", "title": "Thematic Systems Project II", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 72, "course": "Computer Science"}, {"moduleCode": "CS3283", "title": "Media Technology Project I", "description": "This module is the first part of a two-part series on the development of media technology systems such as interactive systems, games, retrieval systems, multimedia computing applications, etc. Students will form project teams to work on media technology projects. This first part focuses on the analysis of the user\u2019s needs, formulation of the computing requirements of the desired solution that\nmeets the user\u2019s needs, design of the systems according to the requirements, implementation of first-cut prototype for evaluation purpose, and evaluation of the design.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 2, 0, 4, 2], "prerequisite": "SoC students: (CS2103 or CS2103T) and (CS3218 or CS3240 or CS3241 or CS3242 or CS3245 or CS3246 or CS3247 or CS3249 or module approved by Department of Computer Science); Other students: NM3216 or NM3221 or NM3226 or NM3227 or NM3231 or the prerequisites for SoC students", "preclusion": "CS4201, CS4202, CS4203, CS4204.", "semesterData": [], "vacancy": 62, "course": "Computer Science"}, {"moduleCode": "CS3284", "title": "Media Technology Project II", "description": "This module is the second part of a two-part series on the development of media technology systems such as interactive systems, games, retrieval systems, multimedia computing applications, etc. Students will form project teams to work on media technology projects. This second part focuses on the development of algorithms required for the systems, implementation and testing of the algorithms and the systems, and evaluation of the systems according to the users\u2019 requirements.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 2, 0, 4, 2], "prerequisite": "CS3283 Media Technology Project I", "preclusion": "CS4201, CS4202, CS4203, CS4204.", "semesterData": [], "vacancy": 79, "course": "Computer Science"}, {"moduleCode": "CS3882", "title": "Breakthrough Ideas for Digital Markets", "description": "This module provides students the opportunity to explore and conceptualize new digital products or services that will impact people and enterprises. Students will cultivate the importance of thinking \u201cdesign\u201d for the purpose of developing valuable, captivating and usable digital products or services. The module will provide students with insights into the innovation process and case studies of\nsuccessful innovation. Exposure to ideas from leading companies and serial entreprenurs will motivate ideation. Students will be required to benchmark their ideas for competitive positioning.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 7, 1], "prerequisite": "Read and passed 80 MCs of modules. Students from Engineering, Science, and FASS with sufficient computing background and have read and passed 80 MCs of module may also apply to read. Student selection process will be enforced.", "semesterData": [], "vacancy": 78, "course": "Computer Science"}, {"moduleCode": "CS4001", "title": "SEP Module", "description": "", "moduleCredit": "4", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 64, "course": "Computer Science"}, {"moduleCode": "CS4002", "title": "Exchange CS Module", "description": "", "moduleCredit": "4", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 100, "course": "Computer Science"}, {"moduleCode": "CS4003", "title": "Exchange CS Module", "description": "", "moduleCredit": "4", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS4004", "title": "Exchange CS Module", "description": "", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "semesterData": [], "vacancy": 88, "course": "Computer Science"}, {"moduleCode": "CS4005", "title": "Exchange CS Module", "description": "", "moduleCredit": "2", "department": "Computer Science", "faculty": "Computing", "semesterData": [], "vacancy": 56, "course": "Computer Science"}, {"moduleCode": "CS4007", "title": "Exchange CS Module", "description": "", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "semesterData": [], "vacancy": 80, "course": "Computer Science"}, {"moduleCode": "CS4008", "title": "Exchange CS Module", "description": "", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "semesterData": [], "vacancy": 80, "course": "Computer Science"}, {"moduleCode": "CS4211", "title": "Formal Methods for Software Engineering", "description": "Before software can be designed, its requirements must be well understood. This in turns requires a thorough understanding of the application domain. Based on the requirements, software engineers construct design models, and then use these design models as guide to construct software implementations. This module will cover formal specification and verification techniques for accurately capturing and reasoning about requirements, model and code. The topics covered include modeling notations, temporal logics, model checking, software model checking, theorem proving, and symbolic execution based analysis. Most importantly, the module will attempt to inculcate an appreciation and understanding of formal thinking in software design and construction.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS2103 or its equivalent", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 50, "course": "Computer Science"}, {"moduleCode": "CS4212", "title": "Compiler Design", "description": "The objective of this module is to introduce the principal ideas behind program compilation, and discusses various techniques for program parsing, program analysis, program optimisation, and run-time organisation required for program execution. Topics covered include regular expressions, context-free grammars, lexical analysis, syntax analysis; different algorithms for parsing codes, such as top-down parsing, bottom-up parsing; translation to abstract syntax using modern parser generator technology, intermediate representation, semantics analysis, type system, un-optimised code generation, code optimisation, data-flow analysis, instruction scheduling.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "CS2104 Programming Language", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["A"]}], "vacancy": 81, "course": "Computer Science"}, {"moduleCode": "CS4214", "title": "Formal Semantics", "description": "The objective of this course is to provide the basic mathematical techniques to study the semantics and logical reasoning of programs and programming languages. This enables the students the ability to understand semantics specifications and to develop new ones for new languages. The course also describes and compares various advanced programming language features. The course combines theory and practice. Topics covered include axiomatic, denotational and operational semantics, type systems, template meta-programming, staged/generic programming, XML and XML processing.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "CS2104 or CS3212 or CS3234", "attributes": {"lab": true}, "semesterData": [], "vacancy": 85, "course": "Computer Science"}, {"moduleCode": "CS4215", "title": "Programming Language Implementation", "description": "This module provides the students with theoretical knowledge and practical skill in the implementation of programming languages. It discusses implementation aspects of fundamental programming paradigms (imperative, functional and object-oriented), and of basic programming language concepts such as binding, scope, parameter-passing mechanisms and types. It introduces the language processing techniques of interpretation and compilation and virtual machines. The lectures are accompanied by lab sessions which will focus on language processing tools, and take the student through a sequence of programming language implementations. This modules\nalso covers automatic memory management, dynamic linking and just-in-time compilation, as features of modern execution systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 2, 4, 2], "prerequisite": "(CS2010 or its equivalent) or CS2020 or (((CS2030 or its equivalent) or CS2113/T) and ((CS2040 or its equivalent)))", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A", "Unknown"]}], "vacancy": 100, "course": "Computer Science"}, {"moduleCode": "CS4215R", "title": "Programming Language Implementation", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 94, "course": "Computer Science"}, {"moduleCode": "CS4216", "title": "Constraint Logic Programming", "description": "This course introduces the programming methodology of Constraint Logic Programming (CLP). It first covers programming in PROLOG, the basic\n\nCLP programming language. The main part of the course covers modelling of complex problems using constraints and rules, and the use of advanced\n\nalgorithms that are supported by the constraint solvers in modern CLP systems. Also covered are the mathematical foundations of CLP. Throughout\n\nthe course, practical exercises are performed using a modern CLP system such as CLP(R) or Eclipse.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS2104 Programming Language Concepts.", "attributes": {"lab": true}, "semesterData": [], "vacancy": 81, "course": "Computer Science"}, {"moduleCode": "CS4218", "title": "Software Testing", "description": "This module covers the concepts and practice of software testing including unit testing, integration testing, and regression testing. Various testing coverage criteria will be discussed. Debugging methods for finding the root-cause of errors in failing test cases will also be investigated. The use of testing and analysis for performance prediction, performance clustering and performance debugging will be studied. Students will acquire crucial skills on testing and debugging through hands-on assignments.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 1, 2, 5], "prerequisite": "CS3219 Software Engineering Principles and Patterns.", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-05-04T01:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 55, "course": "Computer Science"}, {"moduleCode": "CS4220", "title": "Knowledge Discovery Methods in Bioinformatics", "description": "The advent of high throughput technologies (e.g., DNA chips, microarray), biologists are being overloaded with information (e.g., gene expression data). A systematic way is needed to analyze the data to make sense of them. This module is introduced to provide students with knowledge of techniques that can be used to analyse biological data to enable them to discover new knowledge. At the end of the module, students will be able to identify the relevant techniques for different biological data to uncover new information. Topics include: Clustering analysis, classification, association rule mining; support vector machines; Hidden Markov Models.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "CS2220 or LSM2241", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-05-06T05:00:00.000Z", "examDuration": 120, "covidZones": ["A"]}], "vacancy": 55, "course": "Computer Science"}, {"moduleCode": "CS4220R", "title": "Knowledge Discovery Methods in Bioinformatics", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 85, "course": "Computer Science"}, {"moduleCode": "CS4221", "title": "Database Applications Design and Tuning", "description": "This module addresses the design and performance tuning of\ndatabase applications. The syllabus focusses on relational database applications implemented with relational database management systems. Topics covered include normalisation theory (functional, multi-valued and join dependency, normal forms, decomposition and synthesis methods), entityrelationship approach and SQL tuning (performance evaluation, execution plan verification, indexing, de-normalization, code level and transactions tuning). The syllabus optionally includes selected topics in the technologies, design and performance tuning of non-relational database applications (for instance, network and hierarchical models and nested relational model for an historical perspective, as well as XML and NoSQL systems for a modern perspective).", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS3223", "preclusion": "CS5421", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 86, "course": "Computer Science"}, {"moduleCode": "CS4222", "title": "Wireless Networking", "description": "This module aims to provide solid foundation for students in the area of wireless networks and introduces students to the emerging area of cyber-physical-system/Internet-of-Things. The module will cover wireless networking across all layers of the networking stack including physical, link, MAC, routing and application layers. Different network technologies with different characteristic will also be covered, including cellular networks, Wi-Fi, Bluetooth and ZigBee. Some key concepts that cut across all layers and network types are mobility management, energy efficiency, and integration of sensing and communications. The module emphasizes on exposing students to practical network system issues through building software prototypes.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 2, 4, 2], "prerequisite": "(CS2105 or EE3204/E or EE4204) and \n(EE2012/A or MA2216 or ST2131 or ST2334)", "preclusion": "CS5422 and EE5132", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-05-03T05:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 64, "course": "Computer Science"}, {"moduleCode": "CS4223", "title": "Multi-core Architectures", "description": "The world of parallel computer architecture has gone through a significant transformation in the recent years from high-end supercomputers used only for scientific applications to the multi-cores (multiple processing cores on a single chip) that are ubiquitous in mainstream computing systems including desktops, servers, and embedded systems. In the context of this exciting development, the aim of this module is to examine the design issues that are critical to modern parallel architectures. Topics include instruction-level parallelism through static and dynamic scheduling, shared memory, message-passing, and data parallel computer architectures, cache coherence protocols, hardware synchronization primitives, and memory consistency models.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "(CS2106 Operating Systems or CG2271 Realtime Operating Systems) and (CS3210 Parallel Computing or CS3220 Computer Architecture or CG3207 Computer Architecture).", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 80, "course": "Computer Science"}, {"moduleCode": "CS4223R", "title": "Multi-core Architectures", "description": "The world of parallel computer architecture has gone through a significant transformation in the recent years from high-end supercomputers used only for scientific applications to the multi-cores (multiple processing cores on a single chip) that are ubiquitous in mainstream computing systems including desktops, servers, and embedded systems. In the context of this exciting development, the aim of this module is to examine the design issues that are critical to modern parallel architectures. Topics include instruction-level parallelism through static and dynamic scheduling, shared memory, message-passing, and data parallel computer architectures, cache coherence protocols, hardware synchronization primitives, and memory consistency models.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 85, "course": "Computer Science"}, {"moduleCode": "CS4224", "title": "Distributed Databases", "description": "This module studies the management of data in a distributed environment. It covers the fundamental principles of distributed data management and includes distribution design, data integration, distributed query processing and optimization, distributed transaction management, and replication. It will also look at how these techniques can be adapted to support database management in emerging technologies (e.g., parallel systems, peer-to-peer systems, cloud computing).", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS3223", "preclusion": "CS5424", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-28T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 73, "course": "Computer Science"}, {"moduleCode": "CS4225", "title": "Big Data Systems for Data Science", "description": "Data science incorporates varying elements and builds on techniques and theories from many fields, including statistics, data engineering, data mining, visualization, data warehousing, and high-performance computing systems with the goal of extracting meaning from big data and creating data products. Data science utilizes advanced computing systems such as Apache Hadoop and Spark to address big data challenges. In this module, students will learn various computing systems and optimization techniques that are used in data science with emphasis on the system building and algorithmic optimizations of these techniques.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS2102 or IT2002", "preclusion": "BT4221 and CS5425", "attributes": {"lab": true, "mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 59, "course": "Computer Science"}, {"moduleCode": "CS4226", "title": "Internet Architecture", "description": "This module aims to focus on advanced networking concepts pertaining to the modern Internet architecture and applications. It covers a range of topics including network performance (throughput, delay, Little\u2019s Law and M/M/1 queuing formula), and resource allocation and buffer management (max-min fair, round-robin and RED), intra- and inter-domain routing (RIP, OSPF and BGP), congestion control and modern variations of TCP (AIMD and Cubic TCP), peer-to-peer applications and content delivery networks (BitTorrent, Skype, Akamai), and data center networking and management (SDN and OpenFlow).", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "(CS2105 or EE3204 or EE4204) and \n(EE2012/A or MA2216 or ST2131 or ST2334)", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-01T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 64, "course": "Computer Science"}, {"moduleCode": "CS4231", "title": "Parallel and Distributed Algorithms", "description": "This course will examine some fundamental issues in parallel programming and distributed computing, and the relationships between the two.  Parallel programming: mutual exclusion, semaphores, consistency, wait-free synchronization.  Distributed computing: time, global state, snapshots, message ordering.  Relationships: consensus, fault-tolerance, transactions, self-stabilization.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3230 Design and Analysis of Algorithms or CS3210 Parallel Computing", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-05-04T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 66, "course": "Computer Science"}, {"moduleCode": "CS4232", "title": "Theory of Computation", "description": "The objective of this module is to provide students with a theoretical understanding of what can be computed, and an introduction to the theory of complexity. It aims to introduce (1) some standard formal models of computation so as to develop an understanding of what can or cannot be computed by various computing devices; (2) some reasoning techniques commonly used in computer science; these include model equivalence, non-determinism, digitalisation, simulation and reduction; and (3) the mathematical formulation of objects in computer science so as to study their properties.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "CS1231 or CS1231S or any level-2 MA module", "semesterData": [{"semester": 1, "examDate": "2020-11-25T09:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 90, "course": "Computer Science"}, {"moduleCode": "CS4232R", "title": "Theory of Computation", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 66, "course": "Computer Science"}, {"moduleCode": "CS4234", "title": "Optimisation Algorithms", "description": "This module covers common algorithmic techniques for solving optimisation problems, and introduces students to approaches for finding good-enough solutions to NP-hard problems. Topics covered include linear and integer programming, network flow algorithms, local search heuristics, approximation algorithms, and randomized algorithms. Through analysis and application of the techniques to a variety of canonical problems, students develop confidence to (i) appropriately model a given optimisation problem, (ii) apply appropriate algorithmic techniques to solve the problem, (iii) analyse the properties of the problem and candidate algorithms, such as time and space complexity, convergence, approximability, and optimality bound.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "CS3230 and \n(MA1101R or MA1311 or MA1508E or MA1513)", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-01T01:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 88, "course": "Computer Science"}, {"moduleCode": "CS4234R", "title": "Optimisation Algorithms", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 100, "course": "Computer Science"}, {"moduleCode": "CS4235", "title": "Computational Geometry", "description": "Computational geometry is the study of algorithms for solving geometric problems. This course introduces the main topics and techniques in this field. They will be presented in connection with applications in CAD, databases, geographic information systems, graphics and robotics. Students will learn the main algorithmic techniques for solving geometric problems and the related discrete geometric structures. At the end of this module, students will be able to design and analyse geometric algorithms and data structures, and to apply these techniques to solve problems arising in applications.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 2, 0, 4, 2], "prerequisite": "CS3230 and (MA1101R or MA1506)", "attributes": {"lab": true}, "semesterData": [], "vacancy": 66, "course": "Computer Science"}, {"moduleCode": "CS4236", "title": "Cryptography Theory and Practice", "description": "This module aims to introduce the foundation, principles and concepts behind cryptology and the design of secure communication systems. The emphasis is on the formulation and techniques of various cryptographic primitives, and on the secure usage of such primitives to achieve the goals of confidentially, integrity, and authenticity in both theoretical settings and practical scenarios. Basic topics include pseudorandom functions, symmetric key encryption, public key encryption, message\nauthentication codes, hash functions, digital signatures, key exchange and PKI. Selected topics may include: secret sharing, TCP/IP security, Kerberos, SSL, trusted computing, side-channel attacks.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (MA1100 or (CS1231 or its equivalent)) and CS2107", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 74, "course": "Computer Science"}, {"moduleCode": "CS4238", "title": "Computer Security Practice", "description": "This is a practice security module with emphasis on hands-on experiences of computer security. The objective of this module is to connect computer security knowledge to practical skills, including common attacks and protection mechanisms, system administration, and development of secured software. Topics covered include network security, operating system security, and application security, such as DNS attacks, memory-error exploits, and web application attacks. Students will learn through lab-based exercises and assignments.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 1, 3, 4], "prerequisite": "CS3235 Computer Security", "attributes": {"lab": true, "mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["A", "Unknown"]}, {"semester": 2, "covidZones": ["A"]}], "vacancy": 99, "course": "Computer Science"}, {"moduleCode": "CS4239", "title": "Software Security", "description": "Software engineering processes need to include security considerations in the modern world. This module familiarizes students to security issues in different stages of the software life-cycle. At the end of the module, the students are expected to understand secure programming practices, be able to analyse and check for impact of malicious inputs in programs, and employ specific testing techniques which can help detect software vulnerabilities.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 2, 5], "prerequisite": "CS3235 Computer Security and (CS2103 or its equivalent)", "preclusion": "CS5439", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-02T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 66, "course": "Computer Science"}, {"moduleCode": "CS4240", "title": "Interaction Design for Virtual and Augmented Reality", "description": "This module aims to expose students to the human-centered principles of designing and building virtual reality (VR) and augmented reality (AR) applications. Students will learn about the fundamentals of VR and AR, human perceptions of reality, and the design patterns and guidelines for user interactions within VR/AR applications. Students will gain hands on experience building VR/AR applications applying these interaction principles.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 2, 4, 2], "prerequisite": "CS3240 and (MA1301 or A-level / H2 Mathematics)", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A", "Unknown"]}], "vacancy": 100, "course": "Computer Science"}, {"moduleCode": "CS4240R", "title": "Interaction Design for Virtual and Augmented Reality", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 65, "course": "Computer Science"}, {"moduleCode": "CS4241", "title": "Multimedia Information Retrieval", "description": "With the proliferation digital media, more and more information is available in non-textual forms. The ability to index, manage and retrieve media contents is of paramount importance. This module introduces the theory, design and technologies of media search. It covers the design of media search engine, the extraction of media features and their indexing, media concept annotation, media search paradigms, and interactive search. It also covers the applications of media search in social media, enterprise and personal media.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3245 Information Retrieval and CS3246 Hypermedia and World Wide Web", "attributes": {"lab": true}, "semesterData": [], "vacancy": 76, "course": "Computer Science"}, {"moduleCode": "CS4242", "title": "Social Media Computing", "description": "The emergence of WWW, smart mobile devices and social networks has revolutionised the way we communicate, create, disseminate, and consume information. This has ushered in a new era of communications that involves complex information exchanges and user relationships. This module aims to provide students with a good understanding of the social network phenomena and computational skills for analysing the complex social relation networks between users, the contents they shared, and the ways contents and events are perceived and propagated through the social networks. The analysis will provide better understanding of the concerns and interests of users, and uncover live and emerging events that will affect the community.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS2108 Introduction to Media Computing and CS3245 Information Retrieval.", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 79, "course": "Computer Science"}, {"moduleCode": "CS4243", "title": "Computer Vision and Pattern Recognition", "description": "This module is for undergraduates who are interested in computer vision and its applications.  It covers (a) the basic skills needed in handling images and videos, (b) the basic theories needed to understand geometrical computer vision, and (c) pattern recognition.  Topics covered in image handling include: contrast stretch, histogram equalization, noise removal, and color space.  Topics covered in geometrical vision include:  affine transform, vanishing points, camera projection models, homography, camera calibration, rotation representations including quaternions, epipolar geometry, binocular stereo, structure from motion.  Topics covered for pattern recognition include principal component analysis.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "((CS1020 or its equivalent) or (((CS2030 or its equivalent) or CS2113/T) and (CS2040 or its equivalent))) and \n(MA1101R or MA1311 or MA1508E or MA1513) and \n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521) and \n(EE2012/A or MA2216 or ST1131/A or ST1232 or ST2131 or ST2334)", "preclusion": "EE4212 Computer Vision\nEE4704 (Image Processing and Analysis)", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 100, "course": "Computer Science"}, {"moduleCode": "CS4243R", "title": "Computer Vision and Pattern Recognition", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 86, "course": "Computer Science"}, {"moduleCode": "CS4244", "title": "Knowledge Representation and Reasoning", "description": "This course will focus on core issues of representation and reasoning of the knowledge in the context of design of intelligent machines. We will focus on how logic can be used to formalise and perform deduction from existing knowledge. We will then discuss compilation techniques. Finally, we will discuss limitations of monotonic logic and discuss challenges for non-monotonic reasoning.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3243", "attributes": {"lab": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 52, "course": "Computer Science"}, {"moduleCode": "CS4246", "title": "AI Planning and Decision Making", "description": "This module introduces the major concepts and paradigms in planning and decision making in complex environments. It examines issues, challenges, and techniques in problem representation, goal or objective specification, response selection, and action\nconsequence for a wide range of strategic and tactical planning and decision making situations. Topics covered include deterministic and non-deterministic planning,\npractical planning and acting under resource constraints and uncertainy, expected utility and rational decision making, decision networks, Markov decision processes,\nelementary game theory, and multi-agent planning and decision making.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "CS3243 and \n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))", "preclusion": "CS5446", "attributes": {"lab": true, "mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-21T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-24T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 100, "course": "Computer Science"}, {"moduleCode": "CS4246R", "title": "AI Planning and Decision Making", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 56, "course": "Computer Science"}, {"moduleCode": "CS4247", "title": "Graphics Rendering Techniques", "description": "This module provides a general treatment of real-time and offline rendering techniques in 3D computer graphics. Specific topics include the raster graphics pipeline, viewing and transformation, real-time mapping techniques, real-time shadow algorithms, local reflection models, global illumination, distributed ray tracing, photon mapping, radiosity, volume rendering, image-based rendering and modelling, and strategies for anti-aliasing and photo-realism.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3241", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-04-26T09:00:00.000Z", "examDuration": 120, "covidZones": ["A"]}], "vacancy": 70, "course": "Computer Science"}, {"moduleCode": "CS4248", "title": "Natural Language Processing", "description": "This module deals with computer processing of human languages, emphasizing a corpus-based empirical approach. The topics covered include: 1. Linguistic essentials. 2. Basic techniques and algorithms: Hidden Markov model, Viterbi algorithm, supervised learning algorithms. 3. Words: part-of-speech tagging. 4. Syntax: noun phrase chunking, named entity tagging, parsing (top down, bottom up, probabilistic). 5. Semantics: word sense disambiguation. 6. Pragmatics: discourse, co-reference resolution. 7. Applications: text categorisation, text summarisation, language identification, information extraction, question answering, machine translation.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "(CS3243 or CS3245) and \n(EE2012/A or MA2216 or ST2131 or ST2334)", "attributes": {"lab": true, "mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T01:00:00.000Z", "examDuration": 90, "covidZones": ["Unknown"]}, {"semester": 2, "covidZones": ["A"]}], "vacancy": 85, "course": "Computer Science"}, {"moduleCode": "CS4248R", "title": "Natural Language Processing", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 83, "course": "Computer Science"}, {"moduleCode": "CS4249", "title": "Phenomena and Theories of Human-Computer Interaction", "description": "This module teaches the underlying science of Human-Computer Interaction (HCI) and its application to user interface design. It surveys a wide range of  psychological theories beginning with organizational behaviour approaches, understanding of work and workflow within organizations, and moving on to understanding human psychological architecture and processing constraints. It demonstrates via a combination of scientific theory understanding and engineering modelling the solutions of design problems facing a user interface designer. It also covers new design methods and techniques available and the new conceptual mechanisms used in HCI such as the metaphors for describing user interaction.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS3240 or NM2213 or NM2216", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["A"]}], "vacancy": 69, "course": "Computer Science"}, {"moduleCode": "CS4257", "title": "Algorithmic Foundations of Privacy", "description": "This module covers algorithmic foundations of computation\nand communication privacy. It provides a thorough\nmethodology for analysis of privacy against inference\nattacks using techniques from statistics, probability theory,\nand machine learning. Students will learn how to reason\nquantitatively about privacy, and evaluate it using the\nappropriate metrics. The module will help students to\ndesign privacy-preserving mechanisms for a range of\nsystems from anonymous communication to data analytics.\nAfter this module, students should be able to identify\nprivacy vulnerabilities in a system, design inference\nattacks, and propose effective countermeasures in a\nsystematic manner.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 5, 3], "prerequisite": "CS2107 and CS3230 and \n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))", "attributes": {"lab": true}, "semesterData": [], "vacancy": 66, "course": "Computer Science"}, {"moduleCode": "CS4261", "title": "Algorithmic Mechanism Design", "description": "Recent years have seen a dramatic rise in the use of algorithms for solving problems involving strategic decision makers. Deployed algorithms now assist in a variety of economic interactions: assigning medical residents to schools, allocating students to courses, allocating security resources in airports, allocating computational resources and dividing rent. We will explore foundational topics at the intersection of economics and computation, starting with the foundations of game theory: Nash equilibria, the theory of cooperative games, before proceeding to covering more advanced topics: matching algorithms, allocation of indivisible goods, and mechanism design.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "(CS2010 or CS2020 or CS2040 or its equivalent) and ((MA1100 or (CS1231 or its equivalent)) and \n(MA1101R or MA1311 or MA1508E or MA1513) and \n(EE2012/A or MA2216 or ST2131 or ST2334)", "preclusion": "CS5461", "attributes": {"lab": true, "mpes1": true}, "semesterData": [], "vacancy": 70, "course": "Computer Science"}, {"moduleCode": "CS4268", "title": "Quantum Computing", "description": "This module will introduce basics of quantum computing and cover various well known algorithms e.g. Deutsch-Jozsa algorithm, Simon\u2019s algorithms, quantum Fourier transform, phase estimation, order finding, Shor\u2019s algorithm and Grover\u2019s algorithm. The module will also cover some basics in quantum information theory, cryptography and error correction.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS3230 and \n(MA1101R or MA1311 or MA1508E or MA1513) and \n(EE2012/A or MA2216 or ST2131 or ST2334)", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-05-06T01:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 73, "course": "Computer Science"}, {"moduleCode": "CS4269", "title": "Fundamentals of Logic in Computer Science", "description": "Logic is often called the \"calculus of computer science\" due to the central role played by logic in computer science akin to the role played by calculus in physics and engineering. This module will formally introduce and prove some of the fundamental results in logic to provide students with a rigorous introduction of syntax, semantics, decision procedures, and complexity of propositional and\nfirst-order logic. The course will be taught from a computer science perspective with particular emphasis on algorithmic and computational complexity components.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "(CS2010 or CS2020 or CS2040/C/S) and (CS1231/S or MA1100).", "preclusion": "CS5469", "attributes": {"lab": true}, "semesterData": [], "vacancy": 75, "course": "Computer Science"}, {"moduleCode": "CS4276", "title": "IoT Security", "description": "With the advent of the Internet-of-Things, the computing paradigm is quickly changing from the traditional cyber domain to cyber-physical domain. This is made possible from devices that are equipped with sensors and actuators that interact with the physical world. In this module, we will investigate how such sensing systems affect the notion of computer security. We will also explore the state-of-the-art research in the areas of sensing systems and how they can provide benefits to the security of the Internet-of-Things. This module will also investigate how an attacker may compromise the sensing information to exploit security vulnerabilities in these systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CG3002 or CG4002 or CS3237", "preclusion": "CS5476", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 53, "course": "Computer Science"}, {"moduleCode": "CS4277", "title": "3D Computer Vision", "description": "One of the most important capability for robots such as self-driving cars, domestic mobile robots, and drones to achieve full autonomy is the ability to perceive the 3D environment. A camera is an excellent choice as the main sensory device for robotic perception because it produces information-rich images, and is lightweight, low cost and requires little or no maintenance. This module covers the mathematical concepts and algorithms that allow us to recover the 3D geometry of the camera motions and the structures in its environment. Topics include projective geometry, camera model, one-/two-/three-/N-View reconstructions and stereo, generalized cameras and non- rigid structure-from-motion.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 4, 3], "prerequisite": "(MA1101R or MA1311 or MA1506 or MA1508E) and (CS2040 or its equivalent)", "preclusion": "CS5477", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-04-26T01:00:00.000Z", "examDuration": 75, "covidZones": ["Unknown"]}], "vacancy": 61, "course": "Computer Science"}, {"moduleCode": "CS4278", "title": "Intelligent Robots: Algorithms and Systems", "description": "This module introduces the core algorithms and system architectures of intelligent robots. It examines the main system components for sensing, decision making, and motion control and importantly, their integration for core robot capabilities, such as navigation and manipulation. It covers the key algorithms for robot intelligence through inference, planning, and learning, and also provides some practical experiences with modern robot systems. A variety of Illustrative examples are given, e.g., self-driving cars, aerial drones, and object manipulation.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 5, 2], "prerequisite": "CS3243 and (MA1101R or MA1311 or MA1508E) and (MA1102R or MA1505 or (MA1511 and MA1512) or MA1521) and (EE2012/A or ST2131 or ST2334)", "preclusion": "CS5478", "attributes": {"lab": true, "mpes1": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 97, "course": "Computer Science"}, {"moduleCode": "CS4330", "title": "Combinatorial Methods in Bioinformatics", "description": "After the complete sequencing of a number of genomes, we are in the stage to understand the mystery of our body, that is, we need to understand the information encoded in the genome and its relationship with RNA and protein.\nThis aim of this module is to cover algorithms related to this stage. In the module, we will cover the algorithms related to genome annotation, motif identification, proteomics, population genetics, microarray, etc.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "(CS2010 or its equivalent) and (CS2220 or LSM2104)", "preclusion": "CS3225 Combinatorial Methods in Bioinformatics", "attributes": {"lab": true, "mpes2": true}, "semesterData": [], "vacancy": 77, "course": "Computer Science"}, {"moduleCode": "CS4344", "title": "Networked and Mobile Gaming", "description": "This module aims at providing students a deep understanding of various technical issues pertaining to the development of networked games and mobile games. Students will be exposed to concepts from distributed systems, operating systems, security and cryptography, networking and embedded systems.  In particular, issues such as game server architectures (mirrored, centralized, peer-to-peer etc.), consistency management (bucket synchronization, dead reckoning etc.), interest management, scalability to large number of clients (C10K problem), cheat prevention and detection, power management, will be discussed.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 2, 0, 5], "prerequisite": "(CS2106 or CG2271) and (CS3103 or CG3204L)", "attributes": {"lab": true}, "semesterData": [], "vacancy": 88, "course": "Computer Science"}, {"moduleCode": "CS4345", "title": "General-Purpose Computation on GPU", "description": "With the advancements in the technology of graphics processing units (GPUs), many computations can be performed faster on the GPUs than the CPUs. They are also programmable, making them useful for not just computer graphics processing but also general-purpose computations. Therefore, they are a natural choice as high-speed coprocessors to the CPUs in various applications. This module introduces the architecture of GPU, program writing on GPU using high-level language such as Cg, and the use of GPU in applications including computer graphics, games, scientific computation, and image processing.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS3241", "attributes": {"lab": true}, "semesterData": [], "vacancy": 68, "course": "Computer Science"}, {"moduleCode": "CS4347", "title": "Sound and Music Computing", "description": "This module introduces the fundamental technologies employed in Sound and Music Computing focusing on three major categories: speech, music, and environmental sound. This module introduces the concept of sound and its representations in the analog and digital domains, as well as in time and frequency domains. Moreover, this module provides hands-on instruction on relevant machine learning tools, and an in-depth review of related technologies in sound data analytics (Automatic Speech Recognition, Automatic Music Transcription and Sound Event Detection) leading to a group project. Topics in sound synthesis, automatic music generation and music information retrieval will be covered for breadth.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0.5, 0.5, 4, 3], "prerequisite": "CS2108 and \n(MA1101R or MA1311 or MA1508E or MA1513) and \n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521)", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 54, "course": "Computer Science"}, {"moduleCode": "CS4350", "title": "Game Development Project", "description": "The objective of this project-based module is to provide an opportunity for the students to work in a group to design and develop a game following the main stages of game development process. The module will focus on the design of core dynamic, game mechanics, strategy, progression, balancing, game levels, interface and technical features including 3D graphics, animation, AI, physics, and networking. In addition, software engineering principles will be practised in developing the game software.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [0, 2, 0, 6, 2], "prerequisite": "CS3247 or NM3216", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 86, "course": "Computer Science"}, {"moduleCode": "CS4351", "title": "Real-Time Graphics", "description": "Real-time graphics is driving many interactive computer applications, such as 3D games, VR, 3D modelling, and data visualization. Recent rendering techniques have been heavily exploiting the powerful graphics hardware to\nachieve unprecedented performance and effects. In this module, students study the modern real-time rendering pipeline and GPU architecture, learn about modern and traditional real-time rendering techniques, and write\nshaders to implement these techniques for the GPU. The syllabus includes multiple-pass rendering; shading and reflection models; procedural texture-mapping and shading; lights and shadows; noise and natural materials;\nnon-photorealistic rendering; volume rendering; deferred shading; scene management; post-rendering processing; performance analysis and optimization.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "CS3241 Computer Graphics", "attributes": {"lab": true}, "semesterData": [], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS4880", "title": "Digital Entrepreneurship", "description": "The course will cover trends in the digital marketplace and emerging high-growth opportunities for digital businesses. The course will highlight issues facing companies with new products and services in an ever-changing digital marketplace. While the course will provide an overview on structuring of new ventures, the primary focus will be on opportunity identification and sources of competitive differentiation, particularly as they relate to digital innovation. To hone these skills the students will communicate by crafting a business plan.", "moduleCredit": "4", "department": "SoC Dean's Office", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "Students in their 3rd year of study in science, technology or\nbusiness", "preclusion": "TR3002 New Venture Creation", "attributes": {"lab": true}, "semesterData": [], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS5201", "title": "Foundation in Theoretical CS", "description": "The purpose of this module is to test the students on basic concepts in theoretical computer science. In particular, the students will be tested on the following areas.\n\nA.\tDesign and Analysis of Algorithms\nB.\tTheory of Computation\nC.\tProgramming Languages\nD.\tLogic and Formal Systems\n\nThe respective undergraduate modules: CS3230, CS3231, CS3212, CS3234", "moduleCredit": "0", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 0, 10], "semesterData": [], "vacancy": 99, "course": "Computer Science"}, {"moduleCode": "CS5202", "title": "Foundation in Computer Systems", "description": "The purpose of this module is to test the students on basic concepts in computer systems. In particular, the students will be tested on the following topics.\n\nA. Advanced Operating Systems\nB. Computer Networks II\nC. Database Management Systems\nD. Computer Architecture\n\nThe respective undergraduate modules:    CS3221, CS3103, CS3223, CS3220", "moduleCredit": "0", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 0, 10], "semesterData": [], "vacancy": 96, "course": "Computer Science"}, {"moduleCode": "CS5205", "title": "Foundation in Programming Languages", "description": "This course is concerned with the practical foundations for the design, implementation and application of programming languages. The course will cover important language concepts that facilitate abstraction, reuse and reasoning in the software construction process. A good understanding of language foundation will help with the design of many little languages for domain-specific applications. The course will show how to translate programs to kernel form as an instance of language compilation, and shall look at the role that type system play towards eliminating some program errors. Formal reasoning of program code can also be applied through logical formulae that can describe the intended behaviour of programs. Both Hoare and separation logic are introduced to allow formal reasoning and capture of important program properties.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 3, 5], "prerequisite": "CS3212", "semesterData": [], "vacancy": 63, "course": "Computer Science"}, {"moduleCode": "CS5206", "title": "Foundation in Algorithms", "description": "This module is a foundation module for graduate students in all areas of CS that aims to provide all graduate students in computer science with the necessary skills for algorithmic problem solving in all areas of computer science. The module presents intermediate level material on design and analysis of algorithms, with emphasis on efficient algorithms and data structures. It includes the implementation and use of advanced data structures and algorithms in advanced software development. The topics covered include asymptotics for analysis of algorithms, the major algorithm design paradigms, amortized complexity analysis, problem complexity and NP-completeness, approximation algorithms.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS2010 or  its equivalent and CS3230", "semesterData": [], "vacancy": 51, "course": "Computer Science"}, {"moduleCode": "CS5207", "title": "Foundation in Operating Systems", "description": "This module is an introductory course to fundamental and advanced operating systems techniques aimed for computer science graduate students.  The topics covered include threads, scheduling, concurrency, memory management, and storage systems, software management, and security.  After taking the module, students are expected to understand common design principles used, understand the common issues and problems in computer systems, and be able to design and evaluate a system.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 3, 5], "semesterData": [], "vacancy": 89, "course": "Computer Science"}, {"moduleCode": "CS5208", "title": "Foundation in Database Systems", "description": "This is a seminar based course that introduces our graduate student to database fundamental. The goal is to cover a broad range of basic topics in database systems to ground the students in the field and to prepare them for research in databases. The course is based on lively discussion of important papers from the literature, covering basic topics such as query processing, optimization, concurrency control, recovery, transaction management and advanced topics such as data mining, distributed databases and data streams.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 5, 3], "prerequisite": "CS3223", "semesterData": [], "vacancy": 70, "course": "Computer Science"}, {"moduleCode": "CS5209", "title": "Foundation in Logic and AI", "description": "Many functionalities which were previously handled by electrical or mechanical devices are now computer controlled. In order to develop reliable computer systems, we need to have the foundations for logically reasoning about their behaviour. This module introduces the students to mathematical logic and its usage in modelling/validating computer systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 2, 6], "prerequisite": "CS3234", "semesterData": [], "vacancy": 99, "course": "Computer Science"}, {"moduleCode": "CS5214", "title": "Design of Optimising Compilers", "description": "The performance gap between optimised and unoptimised code continues to widen as modern processors evolve. Notably, the emerging explicitly parallel instruction computing (EPIC) processors are significantly dependent on a range of aggressive program optimisations to yield performance. This module provides an in-depth study of code optimisation techniques used in compilers for state-of-the-art processors.  Topics covered include structure of an optimising compiler, the program dependence graph, front end optimisations, instruction scheduling, register allocation, compiling for EPIC processors including predicated execution and software pipelining with hardware support, loop optimisations, dataflow analysis and optimisation, optimisations for the memory hierarchy, and automatic parallelisation.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3212 or CS4212", "attributes": {"lab": true}, "semesterData": [], "vacancy": 59, "course": "Computer Science"}, {"moduleCode": "CS5215", "title": "Constraint Processing", "description": "Constraint programming is an alternative approach to computing in which the programming process is limited to a generation of requirements (constraints) and to solving of them by general methods and domain dependent methods. This module discusses the basic aspects of constraint programming, focusing on how to model and solve the constraints. Students will learn problem modelling by means of constraints and the main techniques used to solve such systems of constraints. The module focuses on the fundamental notions of constraint satisfaction problems, local consistency, constraint propagation, complete and incomplete constraint solvers, and various search methods.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS2104", "attributes": {"lab": true, "mpes2": true}, "semesterData": [], "vacancy": 81, "course": "Computer Science"}, {"moduleCode": "CS5216", "title": "Logic Programming and Constraints", "description": "This course aims to discuss the basic aspects of constraint and logic programming. It will focus on constraint logic programming and its realisation in Eclipse, a system that extends Prolog language by means of constraints. The course will focus on problem modelling by means of constraints, and on logic programming techniques concerned with constraints. Students will learn in detail a number of modules of the Eclipse system that aims to increase the versatility of programming by means of constraints. These include: fd (programming over finite domains), clp(R) (solving equations over reals), CHR (constraint handling rules).", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "attributes": {"lab": true}, "semesterData": [], "vacancy": 92, "course": "Computer Science"}, {"moduleCode": "CS5218", "title": "Principles and Practice of Program Analysis", "description": "Program analysis denotes automated processes for predicting, estimating or proving properties of program behavior, whether functional or non-functional.  Example uses are compiler optimization, bug detection, performance evaluation, detection of security vulnerabilities, amongst many others.  This module first provides the rigorous mathematical foundations. This step is necessary in order to understand the common elements within the broad area of software analysis.  Secondly, through the use of a state-of-the-art program analysis system, this module provides hands-on instruction on programming real-life analyses.  In the end, the graduating student will be able to address a broad spectrum of program analysis in a practical way.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 6, 2], "prerequisite": "CS4212 Compiler Design or CS4215 Programming Language Implementation", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 82, "course": "Computer Science"}, {"moduleCode": "CS5219", "title": "Automated Software Validation", "description": "The immense growth in the complexity of software has increased the scope of errors, which are often critical. The nature of these errors is diverse, resulting from the diversity of the various classes of software: sequential, multithreaded, reactive and real-time. In this course, we will study techniques for verification, run-time monitoring and debugging of software which help us to give certain guarantees against such errors. The focus will be on automated validation techniques.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 2, 6], "prerequisite": "CS2104 Programming Language Concepts", "attributes": {"lab": true, "mpes2": true}, "semesterData": [], "vacancy": 79, "course": "Computer Science"}, {"moduleCode": "CS5222", "title": "Advanced Computer Architecture", "description": "The aim of this module is to introduce the state-of-the-art architectural advances underlying the current generation of computing systems. A review of pipelined processor design and hierarchical memory design is followed by advanced topics including exploitation of instruction-level parallelism through dynamic instruction scheduling and speculation, exploiting thread-level parallelism through\nmultiprocessors, and optimizations for memory and storage subsystems. Throughout the module, particular emphasis will be placed on cost-performance-power-reliability trade-offs in designing the different architectural components.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS3220 Computer Architecture or CS4223 Multi-core Architecture", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 77, "course": "Computer Science"}, {"moduleCode": "CS5223", "title": "Distributed Systems", "description": "The topic of Distributed Systems is now garnering increasing importance, especially with the advancement in technology of the Internet and WWW. The aim of this module is to provide students with basic concepts and principles of distributed operating systems, interprocess communications, distributed file systems, shared data, and the middleware approach. The module is taught in seminar style, and several case studies are included, e.g. CORBA.   Topics: Introduction - Characteristics of Distributed Systems; Process Management Communication in Distributed Systems; Distributed Synchronisation; Distributed Real-time Systems; File Systems; Naming Security; Fault Tolerant Distributed Systems; Distributed Simulation; WWW as an application of Distributed System.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3211 Parallel and Concurrent Programming", "attributes": {"lab": true, "mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}, {"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 70, "course": "Computer Science"}, {"moduleCode": "CS5224", "title": "Cloud Computing", "description": "This module aims to provide an overview of the design, management and application of cloud computing. The topics include managing virtualization, cloud computing environments, cloud design patterns and use cases, data centre architectures and technologies, cloud services fulfillment and assurance, orchestration and automation of cloud resources, cloud capacity management, cloud economics, case studies.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 54, "course": "Computer Science"}, {"moduleCode": "CS5226", "title": "Database Tuning", "description": "This module is concerned with the performance related database administration issues. The topics include: an overview of query optimisation techniques, physical data base design, system configuration, buffer management, performance analysis and tuning techniques.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3223", "attributes": {"lab": true}, "semesterData": [], "vacancy": 70, "course": "Computer Science"}, {"moduleCode": "CS5228", "title": "Knowledge Discovery and Data Mining", "description": "This course introduces fundamental principles behind data mining and efficient techniques for mining large databases. It provides an overview of the algorithmic aspect of data mining: its efficiency (high-dimensional database indexing, OLAP, data reduction, compression techniques) and effectiveness (machine learning involving greedy search, branch and bound, stochastic search, parameter optimisation). Efficient techniques covered include association rules mining (Apriori algorithm, correlation search, constrained association rule discovery), classifier induction (decision trees, RainForest, SLIQ; Support vector machine; Naive Bayesian; classification based on association / visualisation), cluster analysis (k-means, k-mediods, DBSCAN, OPTICS, DENCLUE, STING, CLUSEQ, ROCK etc), and outliers/deviants detection (LOF, Distance-based outlier etc).", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS2102 and CS3243 and \n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))", "attributes": {"lab": true, "mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": []}, {"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 95, "course": "Computer Science"}, {"moduleCode": "CS5229", "title": "Advanced Computer Networks", "description": "This course covers advanced fundamental principles of computer networks and techniques for networking. The goal of this course is to teach these fundamentals/techniques that will remain important and relevant regardless of the hot topics in networks and networking. Briefly, the topics include advanced network architecture and design principles, protocol mechanisms, implementation principles and software engineering practices, network algorithmic, network simulation techniques and tools, performance analysis and measurement, and protocol specification/verification techniques.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 2, 6], "prerequisite": "CS4226 Internet Architecture or EE4210 Computer Communications Networks II", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 56, "course": "Computer Science"}, {"moduleCode": "CS5230", "title": "Computational Complexity", "description": "The aim of this module is to study the various measures of difficulty of problem solving in computing, and to introduce some techniques in theoretical computer science such as non-determinism, digitalisation, simulation, padding, reduction, randomisation and interaction. Topics covered include: space and time complexity - the classes P, NP, co-NP, PSPACE, EXP, etc.; tape compression; linear speedup; polynomial reduction; Cook's theorem; Savitch's theorem; translation lemma; Gap theorem; NP-completeness and NP-hard problems; probabilistic complexity classes; approximation algorithms; and interactive protocols.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS4232 Theory of Computation", "preclusion": "CS4230", "attributes": {"lab": true, "mpes2": true}, "semesterData": [], "vacancy": 70, "course": "Computer Science"}, {"moduleCode": "CS5231", "title": "Systems Security", "description": "This module introduces fundamental notions and requirements in computer system security and the mechanisms that provide security in various systems and applications. It aims to teach students the security perspective of popular computer systems, such as desktop systems, mobile systems, and web-based systems. Its topics include software security, operating system security, mobile security, web security, trusted platforms, and auditing and forensic analysis.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS3235 Computer Security", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 75, "course": "Computer Science"}, {"moduleCode": "CS5232", "title": "Formal Specification and Design Techniques", "description": "The primary role of the formal specification is to provide a precise and unambiguous description of a computer system. A formal specification allows the system designer to verify important properties and detect design error before system development begins. The objective of this course is to study various formal specification and design techniques for modelling (1) object-oriented systems, (2) real-time distributed systems, and (3) concurrent reactive systems. The course will focus on the state-based notations Z/Object-Z, event-based notation CSP/Timed-CSP. Graphical modelling notations, such as StateChart and UML (Unified Modelling Language) will also be addressed.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "(MA1100 or (CS1231 or its equivalent)) and CS2103", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-04-29T09:00:00.000Z", "examDuration": 120, "covidZones": ["A"]}], "vacancy": 62, "course": "Computer Science"}, {"moduleCode": "CS5233", "title": "Simulation and Modelling Techniques", "description": "This module aims to provide students with a working knowledge of applying\nsimulation techniques to model, simulate and study complex systems. It covers techniques in simulation model design, model execution, and model analysis. Students will have hands-on experience using a simulation package. The module will also introduce concepts of parallel and distributed simulation, and high level architecture.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS4231 and \n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-05-04T01:00:00.000Z", "examDuration": 120, "covidZones": ["A"]}], "vacancy": 61, "course": "Computer Science"}, {"moduleCode": "CS5234", "title": "Algorithms at Scale", "description": "This course presents advanced techniques for the design and analysis of algorithms and data structures, with emphasis on efficiency and scalability. It will cover a variety of algorithmic topics that arise when coping with very large data sets. How do you design algorithms that scale well? How do you process streaming data? How do you construct algorithms that run efficiently on modern hardware? The goal of this module is to cover modern tools and techniques in algorithm design.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3230", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 97, "course": "Computer Science"}, {"moduleCode": "CS5236", "title": "Advanced Automata Theory", "description": "In computer science, automata are an important tool for many theoretical investigations. Various types of automata have been used to characterise complexity classes. This module covers automata theory in depth, describes the\nChomsky hierarchy, and introduces various advanced topics including automata structures, automata on infinite words, automata on trees and the learnability of classes of regular languages from queries and positive data.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS4232 Theory of Computation", "attributes": {"lab": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-02T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 70, "course": "Computer Science"}, {"moduleCode": "CS5237", "title": "Computational Geometry and Applications", "description": "The course aims to provide students with a geometric viewpoint in problem solving. It lays a foundation for solving problems with computational geometric methods, and bridges the gap between theoretical computer science and the real applications by introducing application areas, such as bio-geometric modelling, computer graphics and mesh generation, as well as other engineering problems such as reverse engineering. Topics include: convex-hull algorithms, simplicial complexes, union of balls, Voronoi diagram, Delaunay triangulation, lifting and projecting, alpha shape, surface reconstruction, sphere algebra, orthogonality and complementarity, molecular skin surfaces, curvatures and surface meshing, deformation and morphing, etc.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3230 Design and Analysis of Algorithms", "attributes": {"lab": true}, "semesterData": [], "vacancy": 79, "course": "Computer Science"}, {"moduleCode": "CS5238", "title": "Advanced Combinatorial Methods in Bioinformatics", "description": "Biology data are too enormous. Handling them using brute-force approaches becomes impossible and efficient algorithms are required. This module has an in-depth study of some of these advanced algorithms. Through the course, students not only are able to understand these algorithms in detail, but are also given chances to solve some research problems in this field. Topics include sequence comparison, structure comparison and prediction, phylogenetic tree reconstruction and comparison, sequencing by hybridisation, Genome rearrangements, gene network, micro-array.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3230", "attributes": {"lab": true}, "semesterData": [], "vacancy": 99, "course": "Computer Science"}, {"moduleCode": "CS5239", "title": "Computer System Performance Analysis", "description": "The objective of this module is to provide students a working knowledge of computer performance evaluation and capacity planning. They will be able to identify performance bottlenecks, to predict when performance limits of a system will be exceeded, and to characterise present and future workload to perform capacity planning activities. Topics include: performance analysis overview; measurement techniques and  tools including workload characterisation, instrumentation, benchmarking, analytical modelling techniques including operational analysis, stochastic queuing network analysis; performance of client-server architectures; capacity planning; case studies.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "((CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or CS2113/T) and (EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 50, "course": "Computer Science"}, {"moduleCode": "CS5240", "title": "Theoretical Foundations in MultiMedia", "description": "The module lays the theoretical foundation for graduate students to do research in multimedia: images, videos, audio, speech, graphics and text documents. The module covers the main theoretical issues common to various multimedia research.  These issues provide a general framework within which specific techniques in particular research areas can be understood. Topics include: vector and signal representations of multimedia, spatial and frequency analyses, models and parameter estimation methods. Examples will be drawn from different types of media.  Upon completion, students will be well-grounded to pursue further research in computer vision, graphics, natural language processing, audio analysis and multimedia applications.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0.5, 3, 3], "prerequisite": "((CS1020 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (MA1101R or MA1311 or MA1508E or MA1513) and \n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521) and \n(EE2012/A or MA2216 or ST1131/A or ST1232 or ST2131 or ST2334)", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 76, "course": "Computer Science"}, {"moduleCode": "CS5241", "title": "Speech Processing", "description": "This module exposes the graduate students to the fundamental theory of speech processing, focusing primarily on automatic speech recognition. Upon completion of this module, students should be able to perform research on speech recognition topics and commercial speech technology development. Topics covered by this module include: speech signal processing, automatic speech recognition (ASR), continuous speech recognition, acoustic modelling using the Hidden Markov Model (HMM), language modelling for ASR and advanced speech recognition techniques for state-of-the-art large vocabulary continuous speech recognition (adaptation and robustness, discriminative training and decoding strategies).", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 3, 5], "prerequisite": "(CS1020 or  its equivalent) and CS1231 and (MA1102R or MA1505 or MA1521) and (MA1101R or MA1506)", "attributes": {"lab": true}, "semesterData": [], "vacancy": 65, "course": "Computer Science"}, {"moduleCode": "CS5242", "title": "Neural Networks and Deep Learning", "description": "This module provides students with the knowledge of deep neural network and enables them to apply deep learning methods effectively on real world problems.  The module emphasizes on the understanding of the principles of neural networks and deep learning; practical guidelines and techniques for deep learning; and their applications.  Through assignments and projects, students will design, develop, and evaluate deep learning-based solutions to practical problems, such as those in the areas of computer vision, bioinformatics, fintech, cybersecurity, and games.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 5, 3], "prerequisite": "CS3244 Machine Learning", "attributes": {"lab": true, "mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}, {"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 85, "course": "Computer Science"}, {"moduleCode": "CS5246", "title": "Text Mining", "description": "Text mining concerns the processing of unstructured natural language text to mine information and knowledge. It is distinguished from data mining in its focus on unstructured text rather than structured data present in traditional databases. Topics include text classification, text clustering, sentiment analysis, text summarization, information extraction (named entity recognition, relation and event extraction), and question answering. The module will emphasize the use of machine learning approaches to text mining.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 5, 3], "prerequisite": "CS2103 and \n(MA1101R or MA1311 or MA1508E or MA1513) and \n(EE2012/A or MA2216 or ST2131 or ST2334)", "attributes": {"lab": true}, "semesterData": [], "vacancy": 50, "course": "Computer Science"}, {"moduleCode": "CS5248", "title": "Systems Support for Continuous Media", "description": "This module is targeted at computer science graduate students and covers the major aspects of building streaming media applications -- from coding to transmission to playback. Issues such as transport protocols, control protocols, caching, buffering, synchronisation and adaptations will be examined.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 6, 2], "prerequisite": "CS2106 Introduction to Operating Systems and CS4226 Internet Architecture", "attributes": {"lab": true}, "semesterData": [], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS5249", "title": "Audio in Multimedia Systems", "description": "This module aims at providing students with an in-depth understanding of modern audio technologies, ranging from low-level audio representation to high-level content analysis; and from basic waveform to advanced audio compression and compressed domain processing. Upon completion of this module, students should be able to perform research such as narrowing the semantic gap between low-level features and high-level concepts. Topics include: discretization, sampling, audio formats, audio synthesis, spatial audio, feature extraction, speech recognition, audio segmentation and summarization, source separation, and audio compression.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 6, 2], "prerequisite": "CS1020 or its equivalent) and CS1231 and (MA1102R or MA1505 or MA1505C or MA1521) and (MA1101R or MA1506)", "attributes": {"lab": true}, "semesterData": [], "vacancy": 96, "course": "Computer Science"}, {"moduleCode": "CS5250", "title": "Advanced Operating Systems", "description": "The module covers a broad range of issues in the design and implementation of modern advanced operating systems. The topics covered in this module includes OS design strategies (including microkernels, mobile, embedded and real-time operating systems and the component\u2019s interfaces), priority and resource allocation strategies; scheduling algorithms (including for multi-core, multi-processors); naming, protection and security; UI and windowing systems; file system implementations (including network and distributed file systems); failure and recovery; and virtualization and the Internet-ready OS. They extend and provide in-depth coverage of material in earlier prerequisite OS modules.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "CS2106 Introduction to Operating Systems or CG2271\nReal-Time Operating Systems", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-05-07T06:30:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 82, "course": "Computer Science"}, {"moduleCode": "CS5260", "title": "Neural Networks and Deep Learning II", "description": "This module is a follow-up to CS5242 and covers\nadvanced topics in neural networks and deep learning.\nThis module explores the underlying mechanism of a\nvariety of different types of learning models: unsupervised,\nsemi-supervised, and adversarial learning models, that\nare not covered in CS5242. Topics may include:\ngenerative adversarial networks, adversarial machine\nlearning, zero-shot learning, geometric deep learning,\nneural architecture search.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "CS5242 Neural Networks and Deep Learning", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 72, "course": "Computer Science"}, {"moduleCode": "CS5271", "title": "Performance Analysis of Embedded Systems", "description": "Modern embedded systems are heterogeneous collections of multiple hardware and software components, which might be designed by different vendors and have different\ninterfaces. This heterogeneity, coupled with the complexity of embedded software and the complex features of modern processors make performance analysis of such systems a difficult problem. In recent years, there has been a lot of work in this area, especially because of its practical importance. In this course, we will discuss some of this work with the aim of getting a broad overview of this area. These will include formal models, algorithms, various simulation techniques, tools and case studies in the specific context of embedded systems, which significantly differ from techniques used for the performance analysis of general computer systems. Our focus will be on system-level design techniques, with the aim of critically accessing known models and methods in terms of their generality and ability at different stages of an embedded system design process. This course will be suitable for both graduate students and honors-year undergraduate students, who are interested in the general area of Computer Engineering. The projects/assignments will consist of a mix of theory and implementation and there will be enough flexibility to incline more towards one or the other direction.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 2, 6], "prerequisite": "(CS2271 or CG2271 or CS3220 or CS4223) and CS4212", "attributes": {"lab": true}, "semesterData": [], "vacancy": 57, "course": "Computer Science"}, {"moduleCode": "CS5272", "title": "Embedded Software Design", "description": "This course focuses on the design and implementation of software for programmable embedded systems. Embedded computing systems hidden inside everyday electronic devices such as hand-phones, digital cameras etc. are becoming more and more prevalent. However, the heterogeneous nature of the underlying hardware as well as tight constraints on size, cost, power, and timing pose significant challenges to embedded software development. This course presents techniques that address these distinctive characteristics of embedded software implementation. Topics include embedded software development for programmable processors and reconfigurable hardware, component-based design, optimizations for performance, power, code size, operating system issues, and case studies of available systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "(CG2271 or CS2106) and (CS2103 or its equivalent)", "attributes": {"lab": true}, "semesterData": [], "vacancy": 64, "course": "Computer Science"}, {"moduleCode": "CS5321", "title": "Network Security", "description": "The objective of this module is to introduce students to the various issues that arise in securing the networks, and study the state-of-the-art techniques for addressing these challenges. A number of most damaging attacks on computer systems involve the exploitation of network infrastructure. This module provides an in-depth study of network attack techniques and methods to defend against them. Topics include basic concepts in network security; firewalls and virtual private networks; network intrusion detection; denial of service (DoS); traffic analysis; secure routing protocols; protocol scrubbing; and advanced topics such as wireless network security.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 6, 2], "prerequisite": "CS3235 Computer Security", "attributes": {"lab": true, "mpes2": true, "ssgf": true}, "semesterData": [{"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 67, "course": "Computer Science"}, {"moduleCode": "CS5322", "title": "Database Security", "description": "Database security has a great impact on the design of today's information systems. This course will provide an overview of database security concepts and techniques and discuss new directions of database security in the context of Internet information management. Topics covered include: Access control models for DBMSs, Inference controls, XML database security, Encrypted databases, Digital credentials and PKIs, Trust in open systems, and Peer-to-peer system security.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 6, 2], "prerequisite": "CS3223 Database Systems Implementation", "attributes": {"lab": true, "mpes1": true, "ssgf": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-30T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 87, "course": "Computer Science"}, {"moduleCode": "CS5330", "title": "Randomized Algorithms", "description": "The module will cover basic concepts in the design and analysis of randomized algorithms. It will cover both basic techniques, such as Chernoff bounds, random walks, and the probabilistic method, and a variety of practical algorithmic applications, such as load balancing, hash functions, and graph/network algorithms. The focus will be on utilizing randomization to develop algorithms that are more efficient and/or simpler than their deterministic counterparts.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "CS3230", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 79, "course": "Computer Science"}, {"moduleCode": "CS5331", "title": "Web Security", "description": "This module aims to prepare graduate students for understanding the security of the latest web platform and its interplay with operating systems and the cloud infrastructure. The topics covered include the design of web browsers and web \napplications, vulnerabilities in web applications and web browsers, design of web scanners, authentication in web-based platforms, security policies and enforcement mechanisms. This module also covers security topics on the interface between the \nweb platform and the backend systems, such as the underlying database systems and cloud infrastructure.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS3235 Computer Security", "attributes": {"lab": true, "mpes2": true, "ssgf": true}, "semesterData": [{"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 85, "course": "Computer Science"}, {"moduleCode": "CS5332", "title": "Biometric Authentication", "description": "Biometrics (such as fingerprint, iris images) are commonly used for authentication. This module covers authentication methods, different types of biometrics, pattern recognition, performance measurement, spoofing attacks, as well as issues such as privacy, user acceptance, and standards compliance. Students will gain a solid understanding of the fundamentals of the technology underlying biometric authentication, and the key issues to be addressed for successful deployment. Both the theoretical and practical\naspects of biometrics authentication will be discussed.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 2, 6], "prerequisite": "(CS2040 or its equivalent) and (MA1101R or MA1311 or MA1508E or MA1513) and \n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521) and \n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))", "attributes": {"lab": true, "mpes2": true, "ssgf": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 55, "course": "Computer Science"}, {"moduleCode": "CS5338", "title": "Principles of Planning and Decision Making", "description": "This module introduces graduate students to the principles and\ntechniques commonly used to tackle AI planning and decision\nmaking problems. It examines how to pose and solve decision\nmaking and planning problems in deterministic, probabilistic, and\nadversarial environments for both single and multiagent\nproblems. Topics include deterministic planning, decision theory,\ndecision networks, Markov decision processes, game theory,\nmulti-agent planning, and reinforcement learning.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 4, 3], "prerequisite": "(MA2216 Probability or ST2131 Probability or ST2334 Probability\nand Statistics) and CS3243 Foundations of Artificial Intelligence", "preclusion": "CS4246", "attributes": {"lab": true}, "semesterData": [], "vacancy": 56, "course": "Computer Science"}, {"moduleCode": "CS5339", "title": "Theory and Algorithms for Machine Learning", "description": "The module aims to provide a broad theoretical understanding of machine learning and how the theory guides the development of algorithms and applications. Topics covered include the approximation capabilities of common function classes used for machine learning, such as decision trees, neural networks, and support vector machines, the sample complexity of learning different function classes and methods of reducing the estimation error such as regularization and model selection, and computational methods used for learning such as convex optimization, greedy methods, and stochastic gradient\ndescent.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 4, 3], "prerequisite": "CS3244", "preclusion": "MA4270", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-05-04T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 91, "course": "Computer Science"}, {"moduleCode": "CS5340", "title": "Uncertainty Modelling in AI", "description": "The module covers modelling methods that are suitable for reasoning with uncertainty. The main focus will be on probabilistic models including Bayesian networks and Markov networks. Topics include representing conditional independence, building graphical models, inference using graphical models and learning from data. Selected applications in various domains such as speech, vision, natural language processing, medical informatics, bioinformatics, data mining and others will be discussed.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3243 and \n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))", "attributes": {"lab": true, "mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}, {"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 82, "course": "Computer Science"}, {"moduleCode": "CS5342", "title": "Multimedia Computing and Applications", "description": "", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 6, 2], "prerequisite": "CS4341 or CS3246", "attributes": {"lab": true}, "semesterData": [], "vacancy": 95, "course": "Computer Science"}, {"moduleCode": "CS5343", "title": "Advanced Computer Animation", "description": "From the covert digital water in Titanic to the mixed real and virtual actors in Avatar, from the arm-controllable Wii games to the completely full-body-play Xbox Kinect games, computer animation technologies have advanced significantly during the past decades, both in the movie and the game industries. This module reveals all the exciting behind-the-scene techniques that make these movies and games possible, including but not limited to motion capture, fluid animation, facial animation, and fullbody character animation. This is a project-based course that aims to provide strong foundation on advanced computer animation methods and prepare students for research in animation.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 1, 5.5, 1.5], "prerequisite": "(CS2010 or CS2020 or ((CS2030 or its equivalent) or CS2113/T) and (CS2040 or its equivalent)) and (MA1101R or MA1506) and (MA1102R or MA1505 or MA1505C or MA1521) and CS3241", "attributes": {"lab": true}, "semesterData": [], "vacancy": 51, "course": "Computer Science"}, {"moduleCode": "CS5344", "title": "Big-Data Analytics Technology", "description": "This module analysis of data which can not fit in main memory and application of such analysis to web applications. The topics covered include: map-reduce as a tool for creating parallel algorithms that operate on very large amount of data, similarity search, data-streaming processing, search engine techonology, clustering of very large, high-dimensional datasets.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "BT5110 (Data Management and Warehousing) or database related modules; programming experience (with data structures and algorithms) is required", "attributes": {"lab": true, "mpes1": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 75, "course": "Computer Science"}, {"moduleCode": "CS5345", "title": "Social and Digital Media Analytics", "description": "There is a proliferation of social and digital media content data today generated by both consumers and firms. This module aims to introduce concepts, methods and tools for social and digital media analytics, and in the application and management of such analytics efforts in industry sectors such as telecommunications and consumer retail. Topics covered include network data in social and digital media, formal methods for social network analysis, analytics and visualization tools, population and structural models for network dynamics, and various industry case studies on social and digital media analytics. Instructional methods will include lectures, case analyses, assignments and projects.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "attributes": {"lab": true}, "semesterData": [], "vacancy": 74, "course": "Computer Science"}, {"moduleCode": "CS5346", "title": "Information Visualisation", "description": "This module aims to bring together individual pedagogies\nof design, information, and computation, for teaching the\nanalysis and representation of data for visualisation.\nStudents will learn the methodology of developing and\nevaluating an information visualisation solution, common\ninformation visualisation techniques (such as those for\ntopical, spatial, hierarchical, temporal, and relational data),\nand methods for scaling up interactive visualisation with big\ndata. After the module, students should be able to use the\nexisting visualisation tools for building useful, interactive,\ninformation visualisation to facilitate complex data\nanalytics, exploration, understanding, and pattern\ndiscovery.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 2, 2, 4], "prerequisite": "(CS2040 or its equivalent) and CS2102 and CS3240 and \n(EE2012/A or ST1131/A or ST1232 or DSC2008 or ST2132 or ST2334)", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 52, "course": "Computer Science"}, {"moduleCode": "CS5351", "title": "The Business of Software", "description": "The software business well exceeds a trillion dollars, covering companies that sell software products as well as corporations that depend primarily on software technology for their business. The course will cover the evolution of software business, and the continuous reshaping of industry. Students will be exposed to market dynamics affecting the birth, growth and transition of these businesses. The course will investigate business strategies followed by these companies. Students will be encouraged to reflect on trends emerging from the integration of innovative technologies and evolving consumer and enterprise needs. There will be special emphasis on Asia-Pacific markets and businesses.", "moduleCredit": "4", "department": "Information Systems and Analytics", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "Undergraduate students in their 4th year can apply. Open to PhD students.", "attributes": {"lab": true}, "semesterData": [], "vacancy": 60, "course": "Computer Science"}, {"moduleCode": "CS5421", "title": "Database Applications Design and Tuning", "description": "This module addresses the design and performance tuning of database applications. The syllabus focuses on relational database applications implemented with relational database management systems. Topics covered include normalisation theory (functional, multi-valued and join dependency, normal forms, decomposition and synthesis methods), entity relationship approach and SQL tuning (performance evaluation, execution plan verification, indexing, de-normalization, code level and transactions tuning). The syllabus optionally includes selected topics in the technologies, design and performance tuning of nonrelational database applications (for instance, network and hierarchical models and nested relational model for an historical perspective, as well as XML and NoSQL systems for a modern perspective).", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS3223", "preclusion": "CS4221", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 91, "course": "Computer Science"}, {"moduleCode": "CS5422", "title": "Wireless Networking", "description": "This module aims to provide solid foundation for students in the area of wireless networks and introduces students to the emerging area of cyber-physical-system/Internet-of-Things. The module will cover wireless networking across all layers of the networking stack including physical, link, MAC, routing and application layers. Different network technologies with different characteristic will also be covered, including cellular networks, Wi-Fi, Bluetooth and ZigBee. Some key concepts that cut across all layers and network types are mobility management, energy efficiency, and integration of sensing and communications. The module emphasizes on exposing students to practical network system issues through building software prototypes.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 2, 4, 2], "prerequisite": "(CS2105 or EE3204/E or EE4204) and \n(EE2012/A or MA2216 or ST2131 or ST2334)", "preclusion": "CS4222 and EE5132", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-05-03T05:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 63, "course": "Computer Science"}, {"moduleCode": "CS5424", "title": "Distributed Databases", "description": "This module studies the management of data in a distributed environment. It covers the fundamental principles of distributed data management and includes distribution design, data integration, distributed query processing and optimization, distributed transaction management, and replication. It will also look at how these techniques can be adapted to support database management in emerging technologies (e.g., parallel systems, peer-to-peer systems, cloud computing).", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS3223", "preclusion": "CS4224", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-28T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 52, "course": "Computer Science"}, {"moduleCode": "CS5425", "title": "Big Data Systems for Data Science", "description": "Data science incorporates varying elements and builds on techniques and theories from many fields, including statistics, data engineering, data mining, visualization, data warehousing, and high-performance computing systems with the goal of extracting meaning from big data and creating data products. Data science needs advanced computing systems such as Apache Hadoop and Spark to address big data challenges. In this module, students will learn various computing systems and optimization techniques that are used in data science with emphasis on the system building and algorithmic optimizations of these techniques.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS2102", "preclusion": "BT4221 and CS4225", "attributes": {"lab": true, "mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 95, "course": "Computer Science"}, {"moduleCode": "CS5439", "title": "Software Security", "description": "Software engineering processes need to include security considerations in the modern world. This module familiarizes students to security issues in different stages of the software life-cycle. At the end of the module, the students are expected to understand secure programming practices, be able to analyse and check for impact of malicious inputs in programs, and employ specific testing techniques which can help detect software vulnerabilities.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 2, 5], "prerequisite": "CS3235 and (CS2103 or its equivalent)", "preclusion": "CS4239", "attributes": {"lab": true, "mpes1": true, "ssgf": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-02T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 57, "course": "Computer Science"}, {"moduleCode": "CS5446", "title": "AI Planning and Decision Making", "description": "This module introduces the major concepts and paradigms in planning and decision making in complex environments. It examines issues, challenges, and techniques in problem representation, goal or objective specification, response selection, and action consequence for a wide range of strategic and tactical planning and decision making situations. Topics covered include deterministic and nondeterministic planning, practical planning and acting under resource constraints and uncertainty, expected utility and rational decision making, decision networks, Markov decision processes, elementary game theory, and multiagent planning and decision making.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "CS3243 and \n(EE2012/A or ST2132 or ST2334 or ((MA2216 or ST2131) and (ST1131/A or ST1232 or DSC2008)))", "preclusion": "CS4246", "attributes": {"lab": true, "mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-21T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-24T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 78, "course": "Computer Science"}, {"moduleCode": "CS5461", "title": "Algorithmic Mechanism Design", "description": "Recent years have seen a dramatic rise in the use of\nalgorithms for solving problems involving strategic\ndecision makers. Deployed algorithms now assist in a\nvariety of economic interactions: assigning medical\nresidents to schools, allocating students to courses,\nallocating security resources in airports, allocating\ncomputational resources and dividing rent. We will\nexplore foundational topics at the intersection of\neconomics and computation, starting with the foundations\nof game theory: Nash equilibria, the theory of cooperative\ngames, before proceeding to covering more advanced\ntopics: matching algorithms, allocation of indivisible goods,\nand mechanism design.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "(CS2010 or CS2020 or CS2040 or its equivalent) and ((MA1100 or (CS1231 or its equivalent)) and \n(MA1101R or MA1311 or MA1508E or MA1513) and \n(EE2012/A or MA2216 or ST2131 or ST2334)", "preclusion": "CS4261", "attributes": {"lab": true}, "semesterData": [], "vacancy": 61, "course": "Computer Science"}, {"moduleCode": "CS5469", "title": "Fundamentals of Logic in Computer Science", "description": "Logic is often called the \"calculus of computer science\" due to the central role played by logic in computer science akin to the role played by calculus in physics and engineering. This module will formally introduce and prove some of the fundamental results in logic to provide students with a rigorous introduction of syntax, semantics, decision procedures, and complexity of propositional and\nfirst-order logic. The course will be taught from a computer science perspective with particular emphasis on algorithmic and computational complexity components.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "(CS2010 or CS2020 or CS2040/C/S) and (CS1231/S or MA1100).", "preclusion": "CS4269", "attributes": {"lab": true}, "semesterData": [], "vacancy": 79, "course": "Computer Science"}, {"moduleCode": "CS5476", "title": "IoT Security", "description": "With the advent of the Internet-of-Things, the computing\nparadigm is quickly changing from the traditional cyber\ndomain to cyber-physical domain. This is made possible\nfrom devices that are equipped with sensors and actuators\nthat interact with the physical world. In this module, we will\ninvestigate how such sensing systems affect the notion of\ncomputer security. We will also explore the state-of-the-art\nresearch in the areas of sensing systems and how they\ncan provide benefits to the security of the Internet-ofThings. Furthermore, this module will also investigate how\nan attacker may compromise the sensing information to\nexploit security vulnerabilities in these systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CG3002 or CG4002 or CS3237", "preclusion": "CS4276", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 51, "course": "Computer Science"}, {"moduleCode": "CS5477", "title": "3D Computer Vision", "description": "One of the most important capability for robots such as\nself-driving cars, domestic mobile robots, and drones to\nachieve full autonomy is the ability to perceive the 3D\nenvironment. A camera is an excellent choice as the main\nsensory device for robotic perception because it produces\ninformation-rich images, and is lightweight, low cost and\nrequires little or no maintenance. This module covers the\nmathematical concepts and algorithms that allow us to\nrecover the 3D geometry of the camera motions and the\nstructures in its environment. Topics include projective\ngeometry, camera model, one-/two-/three-/N-View\nreconstructions and stereo, generalized cameras and nonrigid structure-from-motion.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 4, 3], "prerequisite": "(MA1101R or MA1311 or MA1506 or MA1508E) and\n(CS2040 or its equivalent)", "preclusion": "CS4277", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-04-26T01:00:00.000Z", "examDuration": 75, "covidZones": ["Unknown"]}], "vacancy": 53, "course": "Computer Science"}, {"moduleCode": "CS5478", "title": "Intelligent Robots: Algorithms and Systems", "description": "This module introduces the core algorithms and system architectures of intelligent robots. It examines the main system components for sensing, decision making, and motion control and importantly, their integration for core robot capabilities, such as navigation and manipulation. It covers the key algorithms for robot intelligence through inference, planning, and learning, and also provides some practical experiences with modern robot systems. A variety of Illustrative examples are given, e.g., self-driving cars, aerial drones, and object manipulation.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 5, 2], "prerequisite": "CS3243 and (MA1101R or MA1311 or MA1508E) and (MA1102R or MA1505 or (MA1511 and MA1512) or MA1521) and (EE2012/A or ST2131 or ST2334)", "preclusion": "CS4278", "attributes": {"lab": true, "mpes1": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 79, "course": "Computer Science"}, {"moduleCode": "CS6101", "title": "Exploration of Computer Science Research", "description": "This module introduces CS graduate students to various research areas in Computer Science. Study groups are organised for major research areas. Each study group provides a forum for students to read, present and discuss\nresearch papers, and acquire the basic research skills for literature review and critical comparison of existing work. Students will also gain a first experience in technical presentation and writing. This module will be graded as \u201cCompleted Satisfactory\u201d or \u201cCompleted Unsatisfactory\u201d (CS/CU).", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [0, 2, 0, 1, 7], "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": []}, {"semester": 2, "covidZones": []}], "vacancy": 62, "course": "Computer Science"}, {"moduleCode": "CS6202", "title": "Advanced Topics in Programming Languages", "description": "This module discusses the contemporary concepts in the design and implementation of major programming languages and systems. It aims to provide students with advanced technical knowledge in evaluating, designing, and implementing an efficient and expressive programming language/system. Topics are selected from a group of contemporary issues that has substantial impact in the development of programming languages/systems, either in terms of performance efficiency or programming expressivity. These include, but not restricted to, computational models, program semantics, concurrency theory, garbage collection techniques, program analysis, type inference, program calculation and transformation, run-time profiling, implementation models, meta-programming.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "3211 or CS3212 or CS4212", "attributes": {"lab": true}, "semesterData": [], "vacancy": 100, "course": "Computer Science"}, {"moduleCode": "CS6203", "title": "Advanced Topics in Database Systems", "description": "This module covers the topics in data base management systems with current research and industrial interests and importance. Examples of topics include multimedia data management, object-oriented database technology, data warehousing and data mining, integration of heterogeneous and legacy systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3223", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 57, "course": "Computer Science"}, {"moduleCode": "CS6204", "title": "Advanced Topics in Networking", "description": "This graduate level course covers a broad range of the latest developments in computer networking and telecommunications in terms of new techniques and technologies, trends, open research issues and some related new principles and approaches in networking. Selected topics covered via class lectures and assigned readings include developments in the past three years. Upon completion of this course, the student will be able to understand the latest issues and proposed solutions in networking, and acquire the skills and methodology for identifying research problems.  This course will help prepare students towards a research career in networking.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 2, 6], "prerequisite": "CS5229 or Permission from lecturer.", "attributes": {"lab": true, "mpes1": true}, "semesterData": [], "vacancy": 51, "course": "Computer Science"}, {"moduleCode": "CS6205", "title": "Advanced Modelling & Simulation", "description": "The aim of this course is to provide students with the ability to model, simulate and analyse complex systems in a reasonable time. This course is divided into three parts and covers advanced techniques in simulation model design, model execution, and model analysis. A selection of model design techniques such as conceptual models, declarative models, functional models, constraint models, and multi-models will be discussed. Model execution techniques include discussion of serial and parallel discrete-event simulation algorithms. For model analysis, topics include input-output analysis, variance reduction techniques and experimental design.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3232 or CS4237", "attributes": {"lab": true}, "semesterData": [], "vacancy": 58, "course": "Computer Science"}, {"moduleCode": "CS6206", "title": "Advanced Topics in Human-Computer Interaction", "description": "This module covers advanced topics in human computer interaction that are of current research or application interests. Its aim is to examine both the theoretical bases that underlie the design of interfaces and advanced technologies for human computer interactions. A wide range of topics may be covered including psychological theories, organisational behaviour, virtual reality, augmented reality, and computer-supported cooperative work. The module illustrates where and when the theories are applicable, demonstrates the solutions using a combination of scientific theory understanding and engineering modelling. It also illustrates advanced technologies that form part of the solutions.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3240", "attributes": {"lab": true}, "semesterData": [], "vacancy": 59, "course": "Computer Science"}, {"moduleCode": "CS6207", "title": "Advanced Natural Language Processing", "description": "The module aims to prepare students to embark on research in natural language processing (NLP). At the end of the course, the students will have experience in reading and critiquing research papers, and will have undertaken a substantial project on some aspects of NLP research. Topics covered include: Statistical parsing, Word sense disambiguation, SENSEVAL, co-reference resolution, machine translation, question answering.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS4248", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 51, "course": "Computer Science"}, {"moduleCode": "CS6208", "title": "Advanced Topics in Artificial Intelligence", "description": "This module covers advanced topics in artificial intelligence that are of current research or application interests. A wide range of topics may be covered including soft computing (fuzzy logic, genetic algorithms, etc.), data mining, machine learning, image and video processing, artificial life, robotics, etc. The exact topics to be taught will depend on the lecturers teaching the module.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS3243", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 74, "course": "Computer Science"}, {"moduleCode": "CS6209", "title": "Topics in Cryptography", "description": "The objective of this module is to provide a systematic treatment to cryptography techniques. Topics covered include: mathematical foundations; information theory; classical cryptographic systems: substitution cipher, shift cipher, affine cipher, hill ciphers, permutation cipher, etc.; design and analysis of block ciphers; pseudorandom numbers and sequences; design and analysis of stream cipher cryptosystems; identification and entity authentication; key management techniques; Rabin public-key encryption; McEliece public-key encryption; signature schemes: RSA, EIGamal, and digital signature standard; design and analysis of hash functions; cryptographic protocols; and efficient implementations.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "attributes": {"lab": true}, "semesterData": [], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS6210", "title": "The Art of Computer Science Research", "description": "This module aims to provide the meta-skills for research in computer science. How does one discover great research problems? What are the good strategies for solving research problems? How does one write papers or give presentations with great impact? Students will seek answers to these questions by critically examining and assessing successful and less successful examples of\nresearch.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS3230 Design and Analysis of Algorithms", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 65, "course": "Computer Science"}, {"moduleCode": "CS6211", "title": "Analytical Performance Modelling for Computer Systems", "description": "Constructing simple mathematical models to describe a computer system can help in analysis and understanding of the characteristics, behaviour, and performance of the system. This module introduces students to the modelling techniques, commonly used models, applications of the models to performance modelling of computer systems, and experimental validation of the models. After completing the module, students are expected to have the confidence to construct, analyse, and validate a performance model for a computer system that they are interested in.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "(ST2334 or ST2131) and CS2105 and CS2106.", "attributes": {"lab": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 62, "course": "Computer Science"}, {"moduleCode": "CS6212", "title": "Topics in Media", "description": "There is a surge in both the industrial interest and the advancement of media technology. This course aims to bring in the latest advanced development in media technology to the postgraduates.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "Variable, depending on the choice of topics or departmental approval.", "attributes": {"lab": true}, "semesterData": [], "vacancy": 91, "course": "Computer Science"}, {"moduleCode": "CS6213", "title": "Special Topics in Distributed Computing", "description": "", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "prerequisite": "CS3211 or CS4231", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 67, "course": "Computer Science"}, {"moduleCode": "CS6215", "title": "Advanced Topics in Program Analysis", "description": "Program analysis techniques allow one to automatically\nanalyse the behaviour of a computer program, to identify\nbugs and performance bottlenecks. This graduate level\nmodule covers advanced topics in program analysis that\nare of current research or application interests. Students\nwill explore the state-of-the-art techniques and systems for\nprogram analysis. After taking the module, students will\nbe able to apply advanced automated program analysis\ntools and techniques to verify, test, and debug programs,\nas well as be better prepared for conducting research in\nprogram analysis and apply them in related research\nareas.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS3230 and CS4212", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 99, "course": "Computer Science"}, {"moduleCode": "CS6216", "title": "Advanced Topics in Machine Learning", "description": "This graduate level module covers advanced topics in\nmachine learning that are of current research or\napplication interests. The exact topics to be taught will\ndepend on the lecturers teaching the module. Upon\ncompletion of this module, the student will have a deeper\nunderstanding on some of the latest research problems in\nmachine learning as well as the state-of-the-art\napproaches and solutions. This module will help prepare\nstudents towards doing research in machine learning.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS3244", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 96, "course": "Computer Science"}, {"moduleCode": "CS6217", "title": "Topics in Prog. Languages & Software Engineering", "description": "This module is aimed at graduate students who are doing\nor intend to do advanced research in programming\nlanguages and software engineering. It exposes students\nto recent advances in topics that include, but not limited\nto, software requirements modelling, design, testing,\nanalysis and verification, with focus on emerging\ntechnologies from research which have found increased\nindustry adoption such as software model checking,\nsymbolic execution based testing and automated program\nrepair.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "attributes": {"lab": true}, "semesterData": [], "vacancy": 95, "course": "Computer Science"}, {"moduleCode": "CS6218", "title": "Principles of Prog. Languages & Software Engineering", "description": "This module is aimed at graduate students who are doing\nor intend to do advanced research in programming\nlanguages and software engineering. It exposes students\nto recent advances in topics that include, but not limited\nto, deductive verification, program analysis, type systems,\nsoftware specification inference, search-based program\nverification such as model checking, as well as general\nconcepts such as abstraction and modularity in the\ncontext of object-oriented languages.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "attributes": {"lab": true}, "semesterData": [], "vacancy": 52, "course": "Computer Science"}, {"moduleCode": "CS6219", "title": "Advanced Topics in Computer Systems", "description": "This graduate-level module covers advanced topics in computer systems that are of current research or application interests. Topics include operating systems,\nsystems architecture and hardware, distributed systems, computer networks, and the interaction between these areas. The exact topics to be taught will depend on the lecturers teaching the module. Upon completion of this module, the student will have a deeper understanding on some of the latest research problems in the area of computer systems, as well as the state-of-the-art approaches to address the problems. This module will help prepare students towards doing research in computer systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS2105 and CS2106", "attributes": {"lab": true, "mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["A"]}], "vacancy": 80, "course": "Computer Science"}, {"moduleCode": "CS6220", "title": "Advanced Topics in Data Mining", "description": "With the rapid advances of computer and internet technologies, a large amount of data accumulates. Discovering knowledge from the data will give us a competitive advantage. The process of knowledge discovery involves pre-processing the data, mining or discovering patterns from the data, and post-processing the discovered patterns. In this course, we will review and examine the present techniques and the theories behind them and explore new and improved techniques for real world knowledge discovery applications. The course is designed to encourage active discussion, creative thinking, and hands-on project development.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS5228", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 89, "course": "Computer Science"}, {"moduleCode": "CS6222", "title": "Advanced Topics in Computational Biology", "description": "This lecture/seminar-based module introduces some biological investigations enabled by the latest experimental technologies in biology. We focus on the role of computing in helping biologists with these investigations. Students are\nexpected to attend lectures, give seminars, and do projects. The seminars require the students to read papers related to the selected biological investigations, the\nenabling experimental technologies, and associated computational solutions. For the projects, students need to develop some methods/algorithms, integrate existing tools, or enhance existing tools with new functions.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS2220", "attributes": {"lab": true}, "semesterData": [], "vacancy": 94, "course": "Computer Science"}, {"moduleCode": "CS6230", "title": "Topics in Information Security", "description": "This module aims to prepare graduate students for research and development in information security, by investigating selected topics in cryptography and information theoretic security. Selected topics may include classical issues such as provable security, design of symmetric key ciphers, and public key cryptography, as well as emerging topics, such as pairing-based cryptography, homomorphic encryption, privacy-preserving methods, information hiding, and data forensic. Other topics of current research interests may also be included.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 3, 5], "prerequisite": "CS4236 and CS5321", "attributes": {"lab": true, "mpes1": true}, "semesterData": [], "vacancy": 89, "course": "Computer Science"}, {"moduleCode": "CS6231", "title": "Advanced Topics in Security and Privacy", "description": "This module aims to prepare PhD students for research in security and privacy, by investigating security issues in various theoretical as well as system computer science areas such as software, networks, data analytics and machine learning, etc. It addresses security and privacy concepts and design principles from an adversarial perspective. Selected topics in security and privacy are covered, such as software security, applied cryptography, privacy-preserving data analysis, and design of secure distributed systems. Emerging topics of current research interests may be included as well.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 6, 2], "prerequisite": "CS4236 Cryptography Theory and Practice or \nCS3235 Computer Security or \nCS5231 System Security.", "attributes": {"lab": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 71, "course": "Computer Science"}, {"moduleCode": "CS6234", "title": "Advanced Algorithms", "description": "This module is aimed at graduate students who are doing or intend to do advanced research in algorithms design and analysis in all areas of computer science. The module covers advanced material on combinatorial and graph algorithms with emphasis on efficient algorithms, and explores their use in a variety of application areas. Topics covered include, but are not restricted to, linear programming, graph matching and network flows, approximation algorithms, randomized algorithms, online algorithms, local search algorithms, algorithms for large datasets. The module will be a seminar-based module that will expose students to current research in these areas.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 5, 3], "prerequisite": "CS5234", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 73, "course": "Computer Science"}, {"moduleCode": "CS6235", "title": "Advanced Topics in Theoretical Computer Science", "description": "This graduate-level module covers advanced topics in the theoretical aspects of computer science that are of current research or application interests. Topics falling under this module include algorithms, theory of computation, formal models, and semantics. The exact topic may vary from year to year and depends on the instructor teaching the module. Upon completion of this module, the student will\nhave a deeper understanding on some of the latest research problems in one of the areas of theoretical computer science. This module will help prepare students towards doing research in theoretical computer science.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS3230", "attributes": {"lab": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 89, "course": "Computer Science"}, {"moduleCode": "CS6240", "title": "Multimedia Analysis", "description": "This module aims to provide a comprehensive and rigorous treatment of the main approaches in multimedia (document, image, video, graphics) analysis. Three main themes are covered: (1) representation and modelling of multimedia entities using various modelling approaches, (2) matching of a model with an input entity, and (3) derivation of a model from sample entities. It focuses on the non-vector-space approach, which complements the vector-space approach to multimedia analysis.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 4, 3], "prerequisite": "CS4243 or CS5240", "attributes": {"lab": true, "mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 56, "course": "Computer Science"}, {"moduleCode": "CS6241", "title": "Advanced Topics in Computer Graphics", "description": "This course aims to familiarise graduate students with the ongoing research works in interactive 3D graphics. Topics covered may include: interactive technologies, graphics data structures (shape representation), image-based modelling and rendering, creation of artistic artifacts, viewing large models, and interactive modelling.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "attributes": {"lab": true}, "semesterData": [], "vacancy": 80, "course": "Computer Science"}, {"moduleCode": "CS6242", "title": "Digital Libraries", "description": "This module is targeted to graduate students of computer science and information systems wishing to understand the issues in building, using and maintaining large\nvolumes of knowledge in digital libraries. Fundamentals of modern information retrieval is assumed. The course will focus on how such information retrieval technology operationalises traditional information finding skills of the librarian/cataloger/archivist, organised around 5S framework for digital\nlibrary education. Areas within digital libraries that will be covered include collection development, knowledge organisation, DL architecture, user behavior, services, preservation, management and evaluation and DL education and research. Students will round out their knowledge with case studies of how different disciplines (e.g. music, arts, medicine and law) impose different search, usability and maintenance requirements on the digital library.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 6, 2], "prerequisite": "CS3245 and CS3246 or their equivalent", "attributes": {"lab": true}, "semesterData": [], "vacancy": 76, "course": "Computer Science"}, {"moduleCode": "CS6244", "title": "Advanced Topics in Robotics", "description": "This module presents the advances in robotics research over a broad range of topics such as robot perception, learning, decision making and control, and human-robot interaction. The exact topics of focus may differ in each offering.  Through this module, students will get familiar with recent research trends and developments in robotics and prepare for research in robotics and related fields.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 5, 3], "prerequisite": "CS3230 and \n(MA1101R or MA1311 or MA1506 or MA1508E) and\n(ST2131 or ST2334)", "attributes": {"lab": true}, "semesterData": [{"semester": 1, "covidZones": ["A"]}], "vacancy": 61, "course": "Computer Science"}, {"moduleCode": "CS6270", "title": "Virtual Machines", "description": "Virtual machines (VMs) have lately generated a lot of interest, both in the academia as well as in the industry. VMs are being seen as a convenient vehicle for managing heterogeneous resources (e.g. server consolidation), and also for solving problems related to running mobile code and security. Commercial VMs from VMware and Microsoft are being successfully used in commodity platforms. High-level language VMs such as the Java Virtual Machine and Microsofts .NET framework have also become highly popular.\n\nThe aim of this module is to give an overview of the state-of-the-art in virtualization technology. The topics to be covered will include techniques for designing and implementing modern VMs, hardware-level, operating system-level and language-level VMs, CPU virtualization concepts and problems, paravirtualization and binary translation techniques, techniques for memory and input/output virtualization, and applications of VMs in solving problems related to security and software distribution. This will be a half lecture-style and the other half seminar-style course and will be suitable for senior undergraduate and graduate students interested in computer architecture, compilers and operating systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 2, 6], "prerequisite": "CS3220 Computer Architecture or CS4223 Multi-core Architectures", "attributes": {"lab": true}, "semesterData": [], "vacancy": 83, "course": "Computer Science"}, {"moduleCode": "CS6280", "title": "Topics in Computer Science: Systems Design for Next Gen Hardware", "description": "With the end of Moore's Law, we are witnessing a paradigm shift in computing platforms towards the inclusion of specialized hardware accelerators. In this module, we will explore the designs of system software on these emerging computing hardware platforms. We will first take a broad overview of existing and upcoming specialized hardware devices, including GPU, TPU, FPGA, SmartNICs, reconfigurable network switches, and other specialized ASICs. We will then discuss various topics in systems design for these new hardware platforms, e.g., OS constructs, abstractions, programming models, resource sharing and multiplexing, scheduling, co-designing with applications and algorithms, and joint processing with CPU.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS2100 Computer Organization and CS2106 Introduction to Operating Systems", "attributes": {"lab": true}, "semesterData": [{"semester": 1, "covidZones": ["A"]}], "vacancy": 93, "course": "Computer Science"}, {"moduleCode": "CS6281", "title": "Topics in Computer Science: Property Testing", "description": "Current datasets can be so large that it is infeasible for any algorithm to inspect all their contents. Nonetheless, we often want to test some hypotheses or estimate some statistics about them.  \u201cProperty testing\u201d is the study of algorithms that look at only a tiny random fraction of the input data and yet, can correctly make decisions about the input with worst-case guarantees. The area has connections to algorithm design, complexity theory, and many parts of mathematics. This module gives a systematic tour of property testing, covering properties of strings, graphs, functions, codes and constraint satisfaction problems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS3230 Design and Analysis of Algorithms and (ST2334 Probability and Statistics or ST2131 Probability)", "attributes": {"lab": true}, "semesterData": [], "vacancy": 50, "course": "Computer Science"}, {"moduleCode": "CS6282", "title": "Topics in Computer Science: Practical Distributed Data", "description": "This graduate seminar will look at practical issues in distributed data management, including topics related to distributed databases and blockchains. The module will focus on recent and on-going research, including topics such as: cloud storage systems, distributed consistency protocols, distributed query processing, IoT data management, stream processing platforms and real-time analytics, blockchain performance, blockchain security, blockchain transactions, smart contracts, and other similar topics.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS4224 Distributed Databases or CS4225 Big Data Systems for Data Science", "preclusion": "Variable, depend on the choice of topics or departmental approval.", "attributes": {"lab": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 99, "course": "Computer Science"}, {"moduleCode": "CS6283", "title": "Topics in Computer Science: Trustworthy Machine Learning", "description": "Machine learning is increasingly being used in critical decision-making systems, yet is not reliable in the presence of noisy, biased, and adversarial data. Can we trust machine learning models?  This module aims to answer this question, by covering the fundamental aspects of reasoning about trust in machine learning, including its robustness to adversarial data and model manipulations, the privacy risks of machine learning algorithms for sensitive data, the transparency measures for machine learning, and fairness in AI. It covers the algorithms that analyze machine learning vulnerabilities; and techniques for building reliable and trustworthy machine learning algorithms.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS3244 Machine Learning", "preclusion": "Variable, depend on the choice of topics or departmental approval.", "attributes": {"lab": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 55, "course": "Computer Science"}, {"moduleCode": "CS6284", "title": "Topics in Computer Science: Big Data Meets New Hardware", "description": "Recently, there has been a renewed interest in the area of big-data systems on emerging hardware. The opportunities and challenges from emerging big-data processing systems have been raised different scales, from a single machine to thousands of machines. The need for effectively utilizing computing resources creates new technologies and research directions: from conventional ones (e.g., cluster computing, in-memory computing), to more recent ones (e.g., GPGPU, many-core processors, NVRAM).  This module will introduce students to the architecture, performance optimization and design of big data systems on various emerging high performance computing hardware including many-core processors and accelerators.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 0, 4, 4], "prerequisite": "CS2100 Computer Organization and CS2102 Database Systems", "preclusion": "Variable, depend on the choice of topics or departmental approval.", "attributes": {"lab": true}, "semesterData": [], "vacancy": 83, "course": "Computer Science"}, {"moduleCode": "CS6285", "title": "Topics in Computer Science: Bridging System and Deep Learning", "description": "Co-design of system and machine learning algorithms has led to faster and more scalable machine learning systems.  The module aims to expose students to recent state-of-the-art co-design techniques to make deep learning run faster, touching on both system research and AI research. The specific topics include distributed deep learning, large-batch training, second-order optimization, asynchronous algorithms, neural network compression, federated machine learning, memory-efficient optimizers, model parallelism, efficient communication library, low-precision training.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 3, 4], "prerequisite": "CS5242 and CS3210", "preclusion": "Variable, depend on the choice of topics or departmental approval.", "attributes": {"lab": true, "mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 66, "course": "Computer Science"}, {"moduleCode": "CS6290", "title": "Lecture Series in Computer Science I", "description": "This seminar-style module exposes students to recent advances of a selected topic in computer science through readings and discussion. The selected topic varies from year-to-year. The module will be graded on a CS/CU basis.", "moduleCredit": "2", "department": "Computer Science", "faculty": "Computing", "workload": [1, 0, 0, 2, 2], "attributes": {"lab": true}, "semesterData": [], "vacancy": 58, "course": "Computer Science"}, {"moduleCode": "CS6291", "title": "Lecture Series in Computer Science II", "description": "This seminar-style module exposes students to recent advances of a selected topic in computer science through readings and discussion. The selected topic varies from year-to-year. The module will be graded on a CS/CU basis.", "moduleCredit": "2", "department": "Computer Science", "faculty": "Computing", "workload": [1, 0, 0, 2, 2], "attributes": {"lab": true}, "semesterData": [], "vacancy": 55, "course": "Computer Science"}, {"moduleCode": "CS6292", "title": "Lecture Series in Computer Science III", "description": "This seminar-style module exposes students to recent advances of a selected topic in computer science through readings and discussion. The selected topic varies from year-to-year. The module will be graded on a CS/CU basis.", "moduleCredit": "2", "department": "Computer Science", "faculty": "Computing", "workload": [1, 0, 0, 2, 2], "attributes": {"lab": true}, "semesterData": [], "vacancy": 54, "course": "Computer Science"}, {"moduleCode": "CS6880", "title": "Advanced Topics in Software Engineering", "description": "This module discusses contemporary concepts in software engineering, ranging from domain analysis, requirement analysis and software architectures; formal methods, analysis, design and implementation.  It aims to provide students with advanced technical and managerial knowledge in evaluating, designing, and implementing big-scale software. These include: Specialized methods for specific application domains (such as embedded systems or Web systems), in-depth study of software engineering sub-disciplines (such as testing or maintenance), as well as the issues of programming language support for software engineering. The module also provides students the opportunity to understand the methodology involved in software-engineering research.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 0, 4, 3], "prerequisite": "CS2103 or its equivalent", "attributes": {"lab": true}, "semesterData": [], "vacancy": 62, "course": "Computer Science"}, {"moduleCode": "CSA6101", "title": "Cultural Studies Theory and Analysis", "description": "This is a foundational module aimed at providing a common conceptual ground for all the candidates in the PhD programme in Cultural Studies in Asia. It examines the works of various theorists from which Cultural Studies draw its concepts and analytic frameworks. It examines how these concepts and frameworks are utilized in the analysis of particular cultural practices and interventions in contemporary societies. Students gain additional depth as they work through the concepts and frameworks in the research papers for this module.", "moduleCredit": "4", "department": "Communications and New Media", "faculty": "Arts and Social Science", "semesterData": [], "vacancy": 72, "course": "Computer Science"}, {"moduleCode": "CSA6102", "title": "Cultural Studies in Asia", "description": "This module will examine the various areas of research in Cultural Studies conducted by Asian scholars or scholars locating their research in Asia. It will examine the histories, concepts and analytic strategies that these scholars deploy in the analysis of the changing cultural landscapes and practices in contemporary Asia. Abiding themes of the module will be the conceptual constitution of the idea of 'Asia', the emergence of 'trans-Asian' practices and the possibility of 'pan-Asian' identities that these trans-location practices might engender.", "moduleCredit": "4", "department": "Communications and New Media", "faculty": "Arts and Social Science", "workload": [2, 1, 0, 2, 5], "semesterData": [{"semester": 1, "covidZones": ["A"]}], "vacancy": 73, "course": "Computer Science"}, {"moduleCode": "CSA6770", "title": "Graduate Research Seminar", "description": "This is a required module for all PhD candidates in Cultural Studies in Asia programme.  It is a forum for candidates to engage each other in critical discussion of their dissertation and other research projects.  Each candidate is required to present a formal research paper.  Active participation from each is expected.  The module will be graded Satisfactory/Unsatisfactory' on the basis of a candidate's presentation and participation in discussions throughout the semester.", "moduleCredit": "4", "department": "Communications and New Media", "faculty": "Arts and Social Science", "workload": [0, 3, 0, 2, 5], "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 52, "course": "Computer Science"}, {"moduleCode": "CSA6880", "title": "Topics in Cultural Studies in Asia", "description": "This module is to be taught by an eminent visiting scholar in Cultural Studies in Asia, appointed as a visiting teaching fellow for one semester. The content of\nmodule will therefore vary according to the specialized interests of the visiting teaching fellow.", "moduleCredit": "4", "department": "Communications and New Media", "faculty": "Arts and Social Science", "workload": [0, 3, 0, 4, 3], "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 66, "course": "Computer Science"}, {"moduleCode": "CSX2991", "title": "Exchange Breadth Module", "description": "", "moduleCredit": "4", "department": "SoC Dean's Office", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 80, "course": "Computer Science"}, {"moduleCode": "CSX2992", "title": "Exchange Breadth Module", "description": "", "moduleCredit": "1", "department": "SoC Dean's Office", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 68, "course": "Computer Science"}, {"moduleCode": "CSX2994", "title": "Exchange Breadth Module", "description": "", "moduleCredit": "3", "department": "SoC Dean's Office", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 70, "course": "Computer Science"}, {"moduleCode": "CSX2995", "title": "Exchange Breadth Module", "description": "", "moduleCredit": "4", "department": "SoC Dean's Office", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 82, "course": "Computer Science"}, {"moduleCode": "CSX3991", "title": "Exchange Breadth Module", "description": "", "moduleCredit": "4", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 75, "course": "Computer Science"}, {"moduleCode": "CSX3992", "title": "Exchange Breadth Module", "description": "", "moduleCredit": "1", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 61, "course": "Computer Science"}, {"moduleCode": "CSX4991", "title": "Exchange Breadth Module", "description": "", "moduleCredit": "4", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 66, "course": "Computer Science"}, {"moduleCode": "CSX4992", "title": "Exchange Breadth Module", "description": "", "moduleCredit": "1", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 64, "course": "Computer Science"}, {"moduleCode": "CSX4993", "title": "Exchange Breadth Module", "description": "", "moduleCredit": "2", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 85, "course": "Computer Science"}, {"moduleCode": "CSX4994", "title": "Exchange Breadth Module", "description": "", "moduleCredit": "3", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 93, "course": "Computer Science"}]