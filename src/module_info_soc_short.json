[{"moduleCode": "CS1010", "title": "Programming Methodology", "description": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing.  Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "preclusion": "CS1010E, CS1010J, CS1010S, CS1010X, CS1010XCP, CS1101S", "attributes": {"mpes1": true, "mpes2": true, "su": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-29T01:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 88, "course": "Computer Science"}, {"moduleCode": "CS1010E", "title": "Programming Methodology", "description": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing.  Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "preclusion": "CS1010, CS1010J, CS1010S, CS1010X, CS1010XCP, CS1101S", "attributes": {"mpes1": true, "mpes2": true, "su": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-27T06:30:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-28T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 4, "examDate": "2021-07-30T01:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 78, "course": "Computer Science"}, {"moduleCode": "CS1010J", "title": "Programming Methodology", "description": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing.  Topics covered include computational thinking and computational problem solving, designing and specifying an algorithm, basic problem formulation and problem solving approaches, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures (arrays, strings, composite data types), basic sorting, and recursion.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "preclusion": "CS1010 and its equivalents", "attributes": {"mpes1": true, "su": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 50, "course": "Computer Science"}, {"moduleCode": "CS1010R", "title": "Programming Methodology", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "CG1101, CS1010, CS1010E, CS1101, CS1101C, CZ1102, IT1002, Engineering students", "attributes": {"su": true}, "semesterData": [{"semester": 1, "covidZones": []}, {"semester": 2, "covidZones": []}], "vacancy": 56, "course": "Computer Science"}, {"moduleCode": "CS1010S", "title": "Programming Methodology", "description": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and \nforemost introductory course to computing and is equivalent to CS1010 and CS1010E Programming Methodology. Topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion. This module is appropriate for FoS students.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "preclusion": "CS1010, CS1010E, CS1010J, CS1010X, CS1010XCP, CS1101S", "attributes": {"mpes1": true, "mpes2": true, "su": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T09:00:00.000Z", "examDuration": 90, "covidZones": ["Unknown", "A"]}, {"semester": 2, "examDate": "2021-04-29T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown", "A"]}, {"semester": 3, "covidZones": []}], "vacancy": 56, "course": "Computer Science"}, {"moduleCode": "CS1010X", "title": "Programming Methodology", "description": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing and is equivalent to CS1010, CS1010S and CS1010E Programming Methodology. The module will be taught using the Python programming language and topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "preclusion": "CS1010 or its equivalent, CS1010FC", "attributes": {"mpes2": true, "su": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}, {"semester": 3, "examDate": "2021-06-18T06:30:00.000Z", "examDuration": 120, "covidZones": []}], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS1010XCP", "title": "Programming Methodology", "description": "This module introduces the fundamental concepts of problem solving by computing and programming using an imperative programming language. It is the first and foremost introductory course to computing and is equivalent to CS1010, CS1010S and CS1010E Programming Methodology. The module will be taught using the Python programming language and topics covered include problem solving by computing, writing pseudo-codes, basic problem formulation and problem solving, program development, coding, testing and debugging, fundamental programming constructs (variables, types, expressions, assignments, functions, control structures, etc.), fundamental data structures: arrays, strings and structures, simple file processing, and basic recursion.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "preclusion": "CS1010 or its equivalent, CS1010FC", "attributes": {"su": true}, "semesterData": [], "vacancy": 74, "course": "Computer Science"}, {"moduleCode": "CS1020", "title": "Data Structures and Algorithms I", "description": "This module is the second part of a three-part series on introductory programming and problem solving by computing. It continues the introduction that begins in CS1010, and emphasises objectoriented programming with application to simple data structures. Topics include object-oriented problem modeling with objects, classes and methods, object-oriented problem formulation and solving, data structure implementation strageties, abstraction and encapsulation of data structures, object-oriented programming constructs, APIs and class libraries, exception handling, lists, linked lists, stacks, queues, hash tables and their algorithmic design, sorting and searching methods, recursive algorithms, and Big-O notation. This module is appropriate for SoC and FoS students.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "prerequisite": "CS1010 Programming Methodology", "preclusion": "CS1020E, CS2020, CS2030, CS2040, CS2040C", "attributes": {"su": true}, "semesterData": [], "vacancy": 76, "course": "Computer Science"}, {"moduleCode": "CS1020E", "title": "Data Structures and Algorithms I", "description": "This module is the second part of a three-part series on introductory programming and problem solving by computing. It continues the introduction that begins in CS1010, and emphasises objectoriented programming with application to simple data structures. Topics include object-oriented problem modeling with objects, classes and methods, object-oriented problem formulation and solving, data structure implementation strageties, abstraction and encapsulation of data structures, object-oriented programming constructs, APIs and class libraries, exception handling, lists, linked lists, stacks, queues, hash tables and their algorithmic design, sorting and searching methods, recursive algorithms, and Big-O notation. This module is appropriate for FoE students.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "prerequisite": "CS1010E or its equivalent", "preclusion": "CS1020, CS2020, CS2030, CS2040, CS2040C", "attributes": {"su": true}, "semesterData": [], "vacancy": 75, "course": "Computer Science"}, {"moduleCode": "CS1101S", "title": "Programming Methodology", "description": "This module introduces the concepts of programming and computational problem solving, and is the first and foremost introductory module to computing. Starting from a small core of fundamental abstractions, the module introduces programming as a method for communicating computational processes. The module begins with purely functional programming based on a simple substitution-based execution model, and ends with a powerful modern imperative language based on a realistic environment-based execution model. Topics covered include: functional abstraction, recursion, higher-order functions, data abstraction, algorithmic strategies, state mutation, loops and arrays, evaluation strategies, sorting and searching, debugging and testing.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 2, 1, 3, 2], "preclusion": "CS1010 or its equivalents", "attributes": {"mpes1": true, "mpes2": true, "su": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T09:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}, {"semester": 2, "examDate": "2021-04-29T01:00:00.000Z", "examDuration": 120, "covidZones": ["A"]}], "vacancy": 52, "course": "Computer Science"}, {"moduleCode": "CS1105A", "title": "Computing and Society", "description": "", "moduleCredit": "4", "department": "Information Systems and Analytics", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 94, "course": "Computer Science"}, {"moduleCode": "CS1231", "title": "Discrete Structures", "description": "This module introduces mathematical tools required in the study of computer science. Topics include: (1) Logic and proof techniques: propositions, conditionals, quantifications.  (2) Relations and Functions: Equivalence relations and partitions.  Partially ordered sets.  Well-Ordering Principle. Function equality.  Boolean/identity/inverse functions.  Bijection. (3) Mathematical formulation of data models (linear model, trees, graphs). (4) Counting and Combinatoric: Pigeonhole Principle. Inclusion-Exclusion Principle.  Number of relations on a set, number of injections from one finite set to another, Diagonalisation proof: An infinite countable set has an uncountable power set; Algorithmic proof: An infinite set has a countably infinite subset.  Subsets of countable sets are countable.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 1, 0, 3, 3], "prerequisite": "A-level Mathematics or H2 Mathematics or MA1301 or MA1301FC or MA1301X", "preclusion": "MA1100, CS1231S", "attributes": {"mpes1": true, "mpes2": true, "su": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-25T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-05-03T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 61, "course": "Computer Science"}, {"moduleCode": "CS1231R", "title": "Discrete Structures", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "MA1100", "attributes": {"su": true}, "semesterData": [], "vacancy": 79, "course": "Computer Science"}, {"moduleCode": "CS1231S", "title": "Discrete Structures", "description": "This module introduces mathematical tools required in the study of computer science. Topics include: (1) Logic and proof techniques: propositions, conditionals, quantifications. (2) Relations and Functions: Equivalence relations and partitions. Partially ordered sets. Well-Ordering Principle. Function equality. Boolean/identity/inverse functions. Bijection. (3) Mathematical formulation of data models (linear model, trees, graphs). (4) Counting and Combinatoric: Pigeonhole Principle. Inclusion-Exclusion Principle. Number of relations on a set, number of injections from one finite set to another, Diagonalization proof: An infinite countable set has an uncountable power set; Algorithmic proof: An infinite set has a countably infinite subset. Subsets of countable sets are countable.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 1, 0, 3, 3], "prerequisite": "A-level Mathematics or H2 Mathematics or MA1301 or MA1301FC or MA1301X", "preclusion": "MA1100 and CS1231 or its equivalent", "attributes": {"mpes1": true, "mpes2": true, "su": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-25T01:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}, {"semester": 2, "examDate": "2021-05-03T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown", "A"]}], "vacancy": 61, "course": "Computer Science"}, {"moduleCode": "CS1300", "title": "Unrestricted Electives for Poly Candidates", "description": "", "moduleCredit": "8", "department": "SoC Dean's Office", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 59, "course": "Computer Science"}, {"moduleCode": "CS2002", "title": "External Module", "description": "", "moduleCredit": "4", "department": "SoC Dean's Office", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 93, "course": "Computer Science"}, {"moduleCode": "CS2003", "title": "Exchange CS Module", "description": "", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 89, "course": "Computer Science"}, {"moduleCode": "CS2004", "title": "Exchange CS Module", "description": "", "moduleCredit": "1", "department": "SoC Dean's Office", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 52, "course": "Computer Science"}, {"moduleCode": "CS2006", "title": "Exchange CS Module", "description": "", "moduleCredit": "3", "department": "SoC Dean's Office", "faculty": "Computing", "attributes": {"su": true}, "semesterData": [], "vacancy": 54, "course": "Computer Science"}, {"moduleCode": "CS2010", "title": "Data Structures and Algorithms II", "description": "This module is the third part of a three-part series on introductory programming and problem solving by computing. It continues the introduction in CS1010 and\nCS1020, and emphasises object-oriented programming with application to complex data structures. Topics covered include trees, binary search trees, order property, prefix/infix/postfix expressions, heaps, priority queues, graphs and their algorithmic design, recursive algorithms, problem formulation and problem solving with applications of complex data structures, data structure design principles and implementation strategies, and algorithm analysis. Advanced data structures such as B-trees and AVL trees are also covered.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "prerequisite": "CS1020 or CS1020E or CG1103 Data Structures and Algorithms I", "preclusion": "CS2020, CS2030, CS2040, CS2040C", "semesterData": [], "vacancy": 83, "course": "Computer Science"}, {"moduleCode": "CS2010R", "title": "Data Structures and Algorithms II", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "CG1102, CS1102, CS1102C, CS1102S, CS2020", "semesterData": [], "vacancy": 56, "course": "Computer Science"}, {"moduleCode": "CS2020", "title": "Data Structures and Algorithms Accelerated", "description": "This module is an accelerated version that combines CS1020 and CS2010. It continues the introduction in CS1010, and emphasises object-oriented programming with application to data structures. Topics covered include object-oriented problem modeling with concepts of objects, classes and methods, object-oriented problem formulation and problem solving, data structure design principles and implementation strageties, abstraction and encapsulation of data structures, object-oriented programming constructs, use of APIs and class libraries, exception handling, lists, linked lists, stacks, queues, hash tables, trees, graphs, and their algorithmic design, various forms of sorting and searching methods, recursive algorithms, and algorithm analysis.", "moduleCredit": "6", "department": "Computer Science", "faculty": "Computing", "workload": [4, 2, 2, 4, 3], "prerequisite": "Obtain a grade of at least A- in either CS1010 or CS1101S or CS1010S or CS1010FC or their equivalents", "preclusion": "CS1020, CS1020E, CS2010, CS2030, CS2040, CS2040C", "corequisite": "Obtain a grade of at least A\u2212 in either CS1010 or  CS1101S Programming Methodology", "semesterData": [], "vacancy": 93, "course": "Computer Science"}, {"moduleCode": "CS2030", "title": "Programming Methodology II", "description": "This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using objectoriented design principles and advanced programming constructs available in the two paradigms. Topics include\nobjects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 2, 3, 2], "prerequisite": "CS1010 or its equivalent", "preclusion": "CS2030S", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-30T09:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}, {"semester": 2, "examDate": "2021-04-28T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown", "A"]}, {"semester": 3, "examDate": "2021-06-18T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown", "A"]}], "vacancy": 80, "course": "Computer Science"}, {"moduleCode": "CS2030S", "title": "Programming Methodology II", "description": "This module is a follow up to CS1010. It explores two modern programming paradigms, object-oriented programming and functional programming. Through a series of integrated assignments, students will learn to develop medium-scale software programs in the order of thousands of lines of code and tens of classes using object-oriented design principles and advanced programming constructs available in the two paradigms. Topics include objects and classes, composition, association, inheritance, interface, polymorphism, abstract classes, dynamic binding, lambda expression, effect-free programming, first class functions, closures, continuations, monad, etc.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 2, 3, 2], "prerequisite": "CS1010 or its equivalent", "preclusion": "CS2030", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-30T09:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}, {"semester": 2, "examDate": "2021-04-28T09:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 76, "course": "Computer Science"}, {"moduleCode": "CS2040", "title": "Data Structures and Algorithms", "description": "This module introduces students to the design and implementation of fundamental data structures and algorithms. The module covers basic data structures (linked lists, stacks, queues, hash tables, binary heaps, trees, and graphs), searching and sorting algorithms, and basic analysis of algorithms.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 1, 3, 3], "prerequisite": "CS1010 or its equivalent", "preclusion": "CS1020, CS1020E, CS2020, CS2010, CS2040C, CS2040S", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-24T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 4, "examDate": "2021-07-30T06:30:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 66, "course": "Computer Science"}, {"moduleCode": "CS2040C", "title": "Data Structures and Algorithms", "description": "This module introduces students to the design and implementation of fundamental data structures and algorithms. The module covers basic data structures (linked lists, stacks, queues, hash tables, binary heaps, trees, and graphs), searching and sorting algorithms, basic analysis of algorithms, and basic object-oriented programming concepts.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 0, 1, 3, 3], "prerequisite": "CS1010 or its equivalent", "preclusion": "CS1020, CS1020E, CS2020, CS2010, CS2040, CS2040S", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-24T05:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS2040S", "title": "Data Structures and Algorithms", "description": "This module introduces students to the design and\nimplementation of fundamental data structures and\nalgorithms. The module covers basic data structures\n(linked lists, stacks, queues, hash tables, binary heaps,\ntrees, and graphs), searching and sorting algorithms, and\nbasic analysis of algorithms.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 1, 2, 2, 2], "prerequisite": "(MA1100 or (CS1231 or its equivalent)) and (CS1010 or its equivalent)", "preclusion": "CS1020, CS1020E, CS2020, CS2010, CS2040, CS2040C", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-24T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-24T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown", "A"]}], "vacancy": 58, "course": "Computer Science"}, {"moduleCode": "CS2100", "title": "Computer Organisation", "description": "The objective of this module is to familiarise students with the fundamentals of computing devices. Through this module students will understand the basics of data representation, and how the various parts of a computer work, separately and with each other. This allows students to understand the issues in computing devices, and how these issues affect the implementation of solutions. Topics covered include data representation systems, combinational and sequential circuit design techniques, assembly language, processor execution cycles, pipelining, memory hierarchy and input/output systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [3, 1, 1, 3, 2], "prerequisite": "CS1010 or its equivalent", "preclusion": "CS1104 or Students from Department of ECE", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-27T01:00:00.000Z", "examDuration": 90, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-27T09:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 82, "course": "Computer Science"}, {"moduleCode": "CS2100R", "title": "Computer Organisation", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "CS1104 or Students from Department of ECE", "semesterData": [], "vacancy": 85, "course": "Computer Science"}, {"moduleCode": "CS2101", "title": "Effective Communication for Computing Professionals", "description": "This module aims to equip students with the skills needed to communicate technical information to technical and nontechnical audiences, and to create comprehensible software documentation. A student-centric approach will\nbe adopted to encourage independent and collaborative learning while engaging students in team-based projects. Students will learn interpersonal and intercultural\ncommunication skills as well as hone their oral and written communication skills. Assessment modes include a variety of oral and written communication tasks such as reports, software guides, oral presentations, software demonstrations and project blogs.", "moduleCredit": "4", "department": "Center for Engl Lang Comms", "faculty": "Computing", "workload": [0, 4, 0, 4, 2], "prerequisite": "Students have to complete ES1000 and/or ES1103 (if required to take the module/s) before reading this module.", "preclusion": "CS2103 Software Engineering, IS2101 Business Technical Communication or its equivalent, ES2002, ES2007D, and ES1601.", "corequisite": "Students have to read CS2103T Software Engineering at the same time as this module.", "attributes": {"mpes1": true, "mpes2": true, "su": true}, "semesterData": [{"semester": 1, "covidZones": []}, {"semester": 2, "covidZones": []}], "vacancy": 67, "course": "Computer Science"}, {"moduleCode": "CS2102", "title": "Database Systems", "description": "The aim of this module is to introduce the fundamental concepts and techniques necessary for the understanding and practice of design and implementation of database applications and of the management of data with relational database management systems. The module covers practical and theoretical aspects of design with entity-relationship model, theory of functional dependencies and normalisation by decomposition in second, third and Boyce-Codd normal forms. The module covers practical and theoretical aspects of programming with SQL data definition and manipulation sublanguages, relational tuple calculus, relational domain calculus and relational algebra.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1.5, 0.5, 3, 3], "prerequisite": "((CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or (CS2040 or its equivalent)) \nand (MA1100 or (CS1231 or its equivalent))", "preclusion": "CS2102S, IT2002", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-27T06:30:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-30T01:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 97, "course": "Computer Science"}, {"moduleCode": "CS2102R", "title": "Database Systems", "description": "The aim of this module is to introduce the fundamental concepts and techniques necessary for the understanding and practice of design and implementation of database applications and of the management of data with relational database management systems. The module covers practical and theoretical aspects of design with entity-relationship model, theory of functional dependencies and normalisation by decomposition in second, third and Boyce-Codd normal forms. The module covers practical and theoretical aspects of programming with SQL data definition and manipulation sublanguages, relational tuple calculus, relational domain calculus and relational algebra.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [1, 0, 0, 1, 0.5], "prerequisite": "(CS1020 or its equivalent) and (CS1231 or MA1100)", "preclusion": "CS2102S, IT2002", "semesterData": [], "vacancy": 75, "course": "Computer Science"}, {"moduleCode": "CS2103", "title": "Software Engineering", "description": "This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "(CS1020 or its equivalent) or CS2020 or ((CS2030 or its equivalent) and (CS2040 or its equivalent))", "preclusion": "CS2103T, CS2113, CS2113T", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-02T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-24T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 100, "course": "Computer Science"}, {"moduleCode": "CS2103R", "title": "Software Engineering", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 96, "course": "Computer Science"}, {"moduleCode": "CS2103T", "title": "Software Engineering", "description": "This module introduces the necessary conceptual and analytical tools for systematic and rigorous development of software systems. It covers four main areas of software development, namely object-oriented system analysis, object-oriented system modelling and design, implementation, and testing, with emphasis on system modelling and design and implementation of software modules that work cooperatively to fulfill the requirements of the system. Tools and techniques for software development, such as Unified Modelling Language (UML), program specification, and testing methods, will be taught. Major software engineering issues such as modularisation criteria, program correctness, and software quality will also be covered.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "For SoC students only. (CS1020 or its equivalent) or CS2020 or ((CS2030 or its equivalent) and (CS2040 or its equivalent))", "preclusion": "CS2103, CS2113, CS2113T, IS2101 or its equivalent.", "corequisite": "Students have to read CS2101 Effective Communication for Computing Professionals at the same time as this module", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-02T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-24T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 64, "course": "Computer Science"}, {"moduleCode": "CS2104", "title": "Programming Language Concepts", "description": "This module introduces the concepts that serve as a basis for hundreds of programming languages. It aims to provide the students with a basic understanding and appreciation of the various essential programming-languages constructs, programming paradigms, evaluation criteria and language implementation issues. The module covers concepts from imperative, object-oriented, functional, logic, constraints, and concurrent programming. These concepts are illustrated by examples from varieties of languages such as Pascal, C, Java, Smalltalk, Scheme, Haskell, Prolog. The module also introduces various implementation issues, such as pseudo-code interpretation, static and dynamic semantics, abstract machine, type inferencing, etc.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "(CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or CS2113/T", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-25T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown", "A"]}], "vacancy": 60, "course": "Computer Science"}, {"moduleCode": "CS2104R", "title": "Programming Language Concepts", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 84, "course": "Computer Science"}, {"moduleCode": "CS2105", "title": "Introduction to Computer Networks", "description": "This module aims to provide a broad introduction to computer networks and network application programming. It covers the main concepts, the fundamental principles, and the high-level workings of important protocols in each of the Internet protocol layer. Topics include the Web and Web applications, DNS services, socket programming, reliable protocols, transport and network layer protocols, secure communication, LAN, and data communication. Practical assignments and handson exercises expose students to network application programming and various networking tools and utilities.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "(CS1020 or its equivalent) or CS2020 or (CS2040 or its equivalents)", "preclusion": "IT2001, EE3204/E, EE4204/E, EE4210/E. CEG, CPE and EEE students are not allowed to take this module.", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-30T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-29T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 84, "course": "Computer Science"}, {"moduleCode": "CS2105R", "title": "Introduction to Computer Networks", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 94, "course": "Computer Science"}, {"moduleCode": "CS2106", "title": "Introduction to Operating Systems", "description": "This module introduces the basic concepts in operating systems and links it with contemporary operating systems (eg. Unix/Linux and Windows). It focuses on OS structuring and architecture, processes, memory management, concurrency and file systems. Topics include kernel architecture, system calls, interrupts, models of processes, process abstraction and services, scheduling, review of physical memory and memory management hardware, kernel memory management, virtual memory and paging, caches, working set, deadlock, mutual exclusion, synchronisation mechanisms, data and metadata in file systems, directories and structure, file system abstraction and operations, OS protection mechanisms, and user authentication.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 0, 6], "prerequisite": "CS2100 or EE2007 or EE2024 or EE2028", "preclusion": "CG2271 or EE4214. CEG students are not allowed to take this module.", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-25T09:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-05-04T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 60, "course": "Computer Science"}, {"moduleCode": "CS2106R", "title": "Introduction to Operating Systems", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "CG2271 or EE4214. CEG students are not allowed to take this module.", "semesterData": [], "vacancy": 53, "course": "Computer Science"}, {"moduleCode": "CS2107", "title": "Introduction to Information Security", "description": "This module serves as an introductory module on information security. It illustrates the fundamentals of how systems fail due to malicious activities and how they can be protected. The module also places emphasis on the practices of secure programming and implementation. Topics covered include classical/historical ciphers, introduction to modern ciphers and cryptosystems, ethical, legal and organisational aspects, classic examples of direct attacks on computer systems such as input validation vulnerability, examples of other forms of attack such as social engineering/phishing attacks, and the practice of secure programming.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS1010 or its equivalence", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-26T01:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-05-04T09:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 99, "course": "Computer Science"}, {"moduleCode": "CS2108", "title": "Introduction to Media Computing", "description": "This module introduces students to (i) the fundamental principles, theory, algorithms, and data structures behind digital representation, compression, synchronization, and processing of image, audio, and video data types, and (ii) challenges and issues in developing media-rich applications, such as media streaming and media retrieval. Students will be exposed to the workings of common media file format and common manipulation techniques on media data. After taking the module, students should be confident enough in developing media applications and make appropriate trade-off and design decisions when dealing in media data in their software.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "(CS1020 or its equivalent) or CS2020 or (CS2040 or its equivalent)", "preclusion": "CS3246", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["Unknown", "A"]}], "vacancy": 95, "course": "Computer Science"}, {"moduleCode": "CS2113", "title": "Software Engineering & Object-Oriented Programming", "description": "This module introduces the necessary skills for systematic and rigorous development of software systems. It covers requirements, design, implementation, quality assurance, and project management aspects of small-to-medium size multi-person software projects. The module uses the Object Oriented Programming paradigm. Students of this module will receive hands-on practice of tools commonly used in the industry, such as test automation tools, build automation tools, and code revisioning tools will be covered.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS2040C or ((CS2030 or its equivalent) and CS2040/S)", "preclusion": "CS2103, CS2103T, (CS2113T for CS2113), (CS2113 for CS2113T)", "corequisite": "CS2101 Effective Communication for Computing Professionals is co-requisite for CS2113T. Students exempted from CS2101 will take CS2113 which does not have CS2101 as co-req. Otherwise, CS2113 and CS2113T are identical.", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-01T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-29T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 63, "course": "Computer Science"}, {"moduleCode": "CS2113T", "title": "Software Engineering & Object-Oriented Programming", "description": "This module introduces the necessary skills for systematic and rigorous development of software systems. It covers requirements, design, implementation, quality assurance, and project management aspects of small-to-medium size multi-person software projects. The module uses the Object Oriented Programming paradigm. Students of this module will receive hands-on practice of tools commonly used in the industry, such as test automation tools, build automation tools, and code revisioning tools will be covered.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS2040C or ((CS2030 or its equivalent) and CS2040/S)", "preclusion": "CS2103, CS2103T, (CS2113T for CS2113), (CS2113 for CS2113T)", "corequisite": "CS2101 Effective Communication for Computing Professionals is co-requisite for CS2113T. Students exempted from CS2101 will take CS2113 which does not have CS2101 as co-req. Otherwise, CS2113 and CS2113T are identical.", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-01T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-29T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 87, "course": "Computer Science"}, {"moduleCode": "CS2220", "title": "Introduction to Computational Biology", "description": "This course aims to develop flexible and logical problem solving skills, understanding of main bioinformatics problems, and appreciation of main techniques and approaches to bioinformatics. Through case studies and hands-on exercises, the student will (i) master the basic tools and approaches for analysis of DNA sequences, protein sequences, gene expression profiles, etc. (ii) understand important problems and applications of computational biology, including identifying functional features in DNA and protein sequences, predicting protein function, and deriving diagnostic models from gene expression profiles, (iii) be confident to propose new solutions to both existing and emerging problems in computational biology.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "(CS1020 or its equivalent) or CS2020 or  (CS2040 or its equivalent)", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-30T05:00:00.000Z", "examDuration": 120, "covidZones": ["Unknown"]}], "vacancy": 57, "course": "Computer Science"}, {"moduleCode": "CS2220R", "title": "Introduction to Computational Biology", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 73, "course": "Computer Science"}, {"moduleCode": "CS2309", "title": "CS Research Methodology", "description": "", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "(CS2010 or its equivalent) or CS2020 or ((CS2030 or its equivalent) or CS2113/T) and (CS2040 or its equivalent))\nand \n(MA1100 or (CS1231 or its equivalent))", "preclusion": "CS2305S", "attributes": {"mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["A"]}], "vacancy": 85, "course": "Computer Science"}, {"moduleCode": "CS3001", "title": "External Module", "description": "", "moduleCredit": "4", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 65, "course": "Computer Science"}, {"moduleCode": "CS3002", "title": "Exchange CS Module", "description": "", "moduleCredit": "4", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 78, "course": "Computer Science"}, {"moduleCode": "CS3003", "title": "Exchange CS Module", "description": "", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "semesterData": [], "vacancy": 54, "course": "Computer Science"}, {"moduleCode": "CS3004", "title": "Exchange CS Module", "description": "", "moduleCredit": "1", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 64, "course": "Computer Science"}, {"moduleCode": "CS3005", "title": "Exchange CS Module", "description": "", "moduleCredit": "2", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS3006", "title": "Exchange CS Module", "description": "", "moduleCredit": "3", "department": "SoC Dean's Office", "faculty": "Computing", "semesterData": [], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS3103", "title": "Computer Networks Practice", "description": "This module aims to provide an opportunity for the students to learn commonly-used network protocols in greater technical depth with their implementation details than a basic networking course. Students will perform hands-on experiments in configuring and interconnecting LANs using networking devices/technologies (e.g., routers, switches, SDN switches, and hubs), networking protocols (e.g., DHCP, DNS, RIP, OSPF, ICMP, TCP, UDP, wireless LAN, VLAN protocols, SIP, SSL, IPSec-VPN) and networking tools (e.g, tcpdump, netstat, ping, traceroute). Students will learn higher-layer network protocols and develop network applications (client/server, P2P) via socket programming.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 2, 4, 2], "prerequisite": "CS2105 or EE3204/E or EE4204", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS3201", "title": "Software Engineering Project I", "description": "This module is the first part of a two-part series on the practice of software engineering in Software Development Life Cycle (SDLC). These two modules together provide the students with hands-on experience in working in project groups through a complete SDLC to develop a well-designed, welltested, large-scaled software system. This first part focuses on applying best software engineering practices on the analysis and design of software system. The students will practice analysis of user\u2019s\nneeds, formulation of computing requirements to meet the user\u2019s needs, modeling and design of the computer systems according to the requirements, and evaluation of the design.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [1, 1, 0, 5, 3], "prerequisite": "(CS2103 or its equivalent) and (CS2101 or IS2101)", "preclusion": "CS3215", "corequisite": "CS3202 Software Engineering Project II", "semesterData": [], "vacancy": 80, "course": "Computer Science"}, {"moduleCode": "CS3201R", "title": "Software Engineering Project I", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "CS3215", "corequisite": "CS3202 Software Engineering Project II", "semesterData": [], "vacancy": 70, "course": "Computer Science"}, {"moduleCode": "CS3202", "title": "Software Engineering Project II", "description": "This module is the second part of a two-part series on the practice of software engineering in Software Development Life Cycle (SDLC). These two modules together provide the students with hands-on experience in working in project groups through a complete SDLC to develop a well-tested, large-scaled software system. This second part focuses on applying best software engineering practices on the implementation and testing of the software system. The students will practice efficient implementation of software components, system integration, software version control, and rigorous testing.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [1, 1, 0, 5, 3], "prerequisite": "CS2103 Software Engineering or its equivalent.", "preclusion": "CS3215 Software Engineering Project", "corequisite": "CS3201 Software Engineering Project I", "semesterData": [], "vacancy": 98, "course": "Computer Science"}, {"moduleCode": "CS3202R", "title": "Software Engineering Project II", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "CS3215 Software Engineering Project", "semesterData": [], "vacancy": 68, "course": "Computer Science"}, {"moduleCode": "CS3203", "title": "Software Engineering Project", "description": "This module provides students with hands-on experience in\nworking in project groups through a complete SDLC to\ndevelop a well-designed, well-tested, large-scaled software\nsystem. The students will apply the current best software\nengineering practices on the analysis, design,\nimplementation, and testing of software system. Through\nthe project, students will practise analysis of user\u2019s needs,\nformulation of computing requirements to meet the user\u2019s\nneeds, modelling and design of the computer systems\naccording to the requirements, evaluation of the design,\nefficient implementation of software components, system\nintegration, software version control, and rigorous testing.", "moduleCredit": "8", "department": "Computer Science", "faculty": "Computing", "workload": [2, 2, 0, 10, 6], "prerequisite": "(CS2103/T or CS2113/T)", "preclusion": "CS3201, CS3202", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}, {"semester": 2, "covidZones": ["Unknown"]}, {"semester": 3, "covidZones": []}], "vacancy": 75, "course": "Computer Science"}, {"moduleCode": "CS3210", "title": "Parallel Computing", "description": "The aim of this module is to provide an introduction to the field of parallel computing with hands-on parallel programming experience on real parallel machines. The module is divided into four parts: parallel computation models and parallelism, parallel architectures, parallel algorithm design and programming, and new parallel computing models. Topics includes: theory of parallelism and models; shared-memory architectures; distributed-memory architectures; data parallel architectures; interconnection networks, topologies and basic of communication operations; principles of parallel algorithm design; performance\nand scalability of parallel programs, overview of new parallel computing models such as grid, cloud, GPGPU.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS2100 or CG2007 or CG2028 or EE2024 or EE2028", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "examDate": "2020-11-30T01:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 53, "course": "Computer Science"}, {"moduleCode": "CS3211", "title": "Parallel and Concurrent Programming", "description": "A concurrent system consists of a set of processes that executes simultaneously and that may collaborate by communicating and synchronising with one another. Examples of concurrent systems are parallel programs that describe sets of collaborating processes. This module introduces the design, development and debugging of parallel programs. It will build on the concurrency concepts gained from the Operating Systems module. It covers concepts and modelling tools for specifying and reasoning (about the properties of) concurrent systems and parallel programs. It also covers principles of performance analysis, asynchronous and asynchronous parallel programming, and engineering concurrent systems and parallel programs.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "CS2106 or CG2271", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-05-05T01:00:00.000Z", "examDuration": 120, "covidZones": ["A"]}], "vacancy": 56, "course": "Computer Science"}, {"moduleCode": "CS3216", "title": "Software Product Engineering for Digital Markets", "description": "In this module, students will practice software product engineering by working in small teams to develop well-tested, user-friendly, production-quality software for the real world. To support this goal, students work closely with users to understand their problems, gather their requirements, and obtain their feedback through a rapid, iterative, application design and development process. Students will also be exposed to practical issues for digital markets such as growing the user base of their application, deployment of the application on the Web or in the cloud system, and validating the UI design and UX of the application.", "moduleCredit": "5", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 8, 2], "prerequisite": "CS2103 or its equivalent or with special approval from instructor. Students will submit personal statements to apply for a place in the course instead of bidding through the CORS system.", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 65, "course": "Computer Science"}, {"moduleCode": "CS3217", "title": "Software Engineering on Modern Application Platforms", "description": "This module introduces students to the practice of software engineering on modern application platforms such as mobile devices, the Web and cloud systems. Students will work in small project teams to develop well-tested,\nproduction-quality software. This module focuses on building core software engineering skills and competencies in programming modern application platforms. It also trains students to work well in project teams. Students will be\nassessed on both their individual programming competencies and their software enginnering skills in final team project.", "moduleCredit": "5", "department": "Computer Science", "faculty": "Computing", "workload": [1, 1, 0, 9, 2], "prerequisite": "CS2103 or its equivalent or with special approval from instructor. Students will submit personal statements to apply for a place in the course instead of bidding through the CORS system.", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 64, "course": "Computer Science"}, {"moduleCode": "CS3218", "title": "Multimodal Processing in Mobile Platforms", "description": "Modern mobile platforms such as smart phones and tablets are equipped with an increasing number of sensing modalities. In addition to traditional components such as keyboards and touch screens, they are also equipped with cameras, microphones, inertial sensor, and GPS receivers. With these modalities all packed into a single platform, it is important to empower application developers with basic knowledge and practical skills in dealing with these modalities. This module introduces the students to basic theories, concept and practical skills needed in input, processing and output of multimodal data on mobile platforms.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 2, 4], "prerequisite": "((CS1020 or its equivalent) or \n(CS2030 or its equivalent) or \n(CS2040 or its equivalent)) and \n(MA1101R or MA1311 or MA1508E or MA1513) and \n(MA1102R or MA1505 or MA1507 or (MA1511 and MA1512) or MA1521)", "semesterData": [], "vacancy": 74, "course": "Computer Science"}, {"moduleCode": "CS3219", "title": "Software Engineering Principles and Patterns", "description": "This module provides an in-depth, hands-on experience in key aspects of software engineering that accompany the development of software. Based on proven principles and best practices, this module focuses on software architectural design from the perspective of the software process. It covers techniques for requirement elicitation and specification that provide sound base for architectural design. The module covers design decision exploration as well as patterns that explicate principles and best practices in replicable form.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "CS2103 or its equivalent", "preclusion": "CS3213 Software Systems Design", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 52, "course": "Computer Science"}, {"moduleCode": "CS3219R", "title": "Software Engineering Principles and Patterns", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "CS3213 Software Systems Design", "semesterData": [], "vacancy": 59, "course": "Computer Science"}, {"moduleCode": "CS3220", "title": "Computer Architecture", "description": "The objective of this module is concerned with design techniques involving the use of parallelism to improve the performance of computer systems. The module is divided into three parts. Part I considers the fundamental methods to improve the performance of single processor systems. Topics include the design principle of instruction set, memory hierarchy, pipeline design techniques, RISC and vector computer. In Part II, multi-processor systems using shared memory are examined in detail, and Part III, multi-processor systems that do not use shared memory are examined.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "CS2106", "preclusion": "EEE & CPE students are not allowed to take this module as cfm/breadth.", "semesterData": [], "vacancy": 54, "course": "Computer Science"}, {"moduleCode": "CS3221", "title": "Operating Systems Design and Pragmatics", "description": "This module builds upon the conceptual foundation formed in CS2106 and extends it to the study of real-life operating systems. The focus is to understand how actual operating systems work including the pragmatics, system architecture and design and implementation. Details will be drawn from contemporary operating systems such as Unix/Linux and Windows. Topics include kernel architecture and interfaces, computer architecture issues, process APIs and implementation, threads, scheduling, physical and kernel memory management, virtual memory, synchronisation and interprocess communication mechanisms, multi-processor issues, device characteristics and management, file system implementation, memory mapped files, special purpose file systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "(CS1020 or its equivalent) and CS2106", "semesterData": [], "vacancy": 59, "course": "Computer Science"}, {"moduleCode": "CS3223", "title": "Database Systems Implementation", "description": "This system-oriented module provides an in-depth study of the concepts and implementation issues related to database management systems. It first covers the physical implementation of the relational data model, which includes storage management, access methods, query processing, and optimisation. Then it covers issues and techniques dealing with multi-user application environments, namely, transactions, concurrency control, and recovery. The third part covers advanced topics such as on-line analytical processing, in-memory databases, and column stores.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (CS2102 or IT2002)", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "examDate": "2021-04-28T05:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 76, "course": "Computer Science"}, {"moduleCode": "CS3223R", "title": "Database Systems Implementation", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 87, "course": "Computer Science"}, {"moduleCode": "CS3225", "title": "Combinatorial Methods in Bioinformatics", "description": "After the complete sequencing of a number of genomes, we are in the stage to understand the mystery of our body, that is, we need to understand the information encoded in the genome and its relationship with RNA and protein. This aim of this module is to cover algorithms related to this stage.  In the module, we will cover the algorithms related to genome annotation, motif identification, proteomics, population genetics, microarray, etc.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 4, 3], "prerequisite": "(CS2010 or CS2020 or CS2040 or CS2040C) and (CS2220 or LSM2104)", "semesterData": [], "vacancy": 93, "course": "Computer Science"}, {"moduleCode": "CS3226", "title": "Web Programming and Applications", "description": "This module introduces students to software development on the Web platforms. Students will be exposed to important computer science concepts, including networking, databases, computer security, user interface design, programming languages, and software engineering. These concepts will be tied together through hands-on practice in building a Web-based application using the current Web development technology. At the end of the module, students are expected to be able to design and develop a Web application, to appreciate the underlying technology needed to build a Web application, and to develop a fundamental understanding of related computer science concepts.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 2, 2, 4], "prerequisite": "CS2010 or CS2020 or (CS2030 or its equivalent) or CS2113/T", "preclusion": "CP3101B", "semesterData": [], "vacancy": 71, "course": "Computer Science"}, {"moduleCode": "CS3230", "title": "Design and Analysis of Algorithms", "description": "This module introduces different techniques of designing and analysing algorithms. Students will learn about the framework for algorithm analysis, for example, lower bound arguments, average case analysis, and the theory of NP-completeness. In addition, students are exposed to various algorithm design paradigms. The module serves two purposes: to improve the students' ability to design algorithms in different areas, and to prepare students for the study of more advanced algorithms. The module covers lower and upper bounds, recurrences, basic algorithm paradigms (such as prune-and-search, dynamic programming, branch-and-bound, graph traversal, and randomised approaches), amortized analysis, NP-completeness, and some selected advanced topics.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "((CS2010 or its equivalent) or CS2020 or (CS2040 or its equivalent)) and (MA1100 or (CS1231 or its equivalent))", "preclusion": "EEE and CPE students can only take this module as a technical elective to satisfy the program requirements or UEM but not CFM/ULR-Breadth.", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "examDate": "2020-12-01T09:00:00.000Z", "examDuration": 150, "covidZones": ["Unknown"]}, {"semester": 2, "examDate": "2021-04-29T05:00:00.000Z", "examDuration": 120, "covidZones": ["A", "Unknown"]}], "vacancy": 91, "course": "Computer Science"}, {"moduleCode": "CS3230R", "title": "Design and Analysis of Algorithms", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read host module. Student selection process is enforced.", "semesterData": [{"semester": 1, "covidZones": []}, {"semester": 2, "covidZones": []}], "vacancy": 60, "course": "Computer Science"}, {"moduleCode": "CS3231", "title": "Theory of Computation", "description": "This module examines fundamental aspects of computation that every computer scientist should know. What is a finite automaton and how does it relate to regular expressions (and searching a database)? What is a context-free language and how does it relate to parsing languages? What is the P vs. NP problem and why does it matter? How do we decide if a problem is easy or hard? This module introduces techniques for precisely formulating problems and studying their properties using a variety of commonly used reasoning techniques (e.g., model equivalence, non-determinism, digitalisation, simulation and reduction).", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 4], "prerequisite": "(CS1231 or equivalent) and (CS2040 or its equivalent)", "attributes": {"mpes1": true}, "semesterData": [], "vacancy": 61, "course": "Computer Science"}, {"moduleCode": "CS3233", "title": "Competitive Programming", "description": "This module aims to prepare students in competitive problem solving. It covers techniques for attacking and solving challenging computational problems. Fundamental algorithmic solving techniques covered include divide and conquer, greedy, dynamic programming, backtracking and branch and bound. Domain specific techniques like number theory, computational geometry, string processing and graph theoretic will also be covered. Advanced AI search techniques like iterative deepening, A* and heuristic search will be included.  The module also covers algorithmic and programming language toolkits used in problem solving supported by the solution of representative or well-known problems in the various algorithmic paradigms.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "At least grade A- in (CS2010 or CS2020 or (both CS2030 and CS2040)) or special permission", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 70, "course": "Computer Science"}, {"moduleCode": "CS3233R", "title": "Competitive Programming", "description": "This module aims to prepare students in competitive problem solving. It covers techniques for attacking and solving challenging computational problems. Fundamental algorithmic solving techniques covered include divide and conquer, greedy, dynamic programming, backtracking and branch and bound. Domain specific techniques like number theory, computational geometry, string processing and graph theoretic will also be covered. Advanced AI search techniques like iterative deepening, A* and heuristic search will be included.  The module also covers algorithmic and programming language toolkits used in problem solving supported by the solution of representative or well-known problems in the various algorithmic paradigms.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [{"semester": 2, "covidZones": []}], "vacancy": 83, "course": "Computer Science"}, {"moduleCode": "CS3234", "title": "Logic for Proofs and Programs", "description": "This module introduces logic as a means for specifying and solving computational problems. It explores how logic can be used to represent computational problems, how these representations can be proven correct, and how they can be executed on a computer. Students learn about logic as formal systems (semantic, axiomatic, and deductive) and how to write proofs in the different systems. They also learn how to use a proof assistant such as Coq and how to program in a logic programming language such as Prolog.  Topics include classical and intuitionistic logic, SAT, Peano\u2019s axioms, Hoare logic, and other selected logic systems.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "MA1100 or (CS1231 or its equivalent); Programming experience is preferred.", "attributes": {"mpes2": true}, "semesterData": [{"semester": 2, "covidZones": ["A"]}], "vacancy": 99, "course": "Computer Science"}, {"moduleCode": "CS3234R", "title": "Logic and Formal Systems", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "semesterData": [], "vacancy": 95, "course": "Computer Science"}, {"moduleCode": "CS3235", "title": "Computer Security", "description": "The objective of this module is to provide a broad understanding of computer security with some indepth discussions on selected topics in system and network security. This module covers the following topics: intrusion detection, DNS security, electronic mail security, authentication, access control, buffer overflow, memory and stack protection, selected topics in application security, for instance, web security, and well-known attacks.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "(CS2105 or EE3204 or EE4204) and (CS2106 or CG2271) and CS2107", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}, {"semester": 2, "covidZones": ["Unknown", "A"]}], "vacancy": 57, "course": "Computer Science"}, {"moduleCode": "CS3236", "title": "Introduction to Information Theory", "description": "This module introduces the basics of modern information theory. It covers how information can be quantified, and what this quantification tells us about how well we can compress and transmit information without error. It discusses basic error correcting techniques, and information-theoretic cryptography. Topics covered\ninclude: mathematical techniques, entropy measures, fundamental limits to data compression and noisy-channel coding, examples of error-correcting codes, examples of information theoretic cryptography (commitments, secure computation, key distribution, randomness extraction).", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 0, 3, 3], "prerequisite": "(MA1100 or (CS1231 or its equivalent)) and \n(EE2012/A or MA2216 or ST2131 or ST2334)", "attributes": {"mpes2": true}, "semesterData": [], "vacancy": 57, "course": "Computer Science"}, {"moduleCode": "CS3236R", "title": "Introduction to Information Theory", "description": "This 1-MC module adds a research component to the host module, enabling students to acquire more in-depth understanding of the research issues pertaining to the subject matter.", "moduleCredit": "1", "department": "Computer Science", "faculty": "Computing", "workload": [0, 0, 0, 2, 1], "prerequisite": "Co-read with host module in current semester or pass host module in previous semester. Student selection process is enforced.", "preclusion": "same as CS3236", "semesterData": [{"semester": 1, "covidZones": []}], "vacancy": 86, "course": "Computer Science"}, {"moduleCode": "CS3237", "title": "Introduction to Internet of Things", "description": "The Internet of Things (IoT), where a large number of physical objects embedded with computing power and sensors connect to the network for seamless cooperation between the cyber domain and the physical world, is revolutionizing our lives. This module will serve as an introduction to the IoT and provide a holistic view of the entire spectrum of the IoT system architecture from the devices to the fog and the cloud computing. The focus will be on designing IoT systems that balance both the functional and non-functional (communication bandwidth, security, safety, power) requirements. The module will have a significant project component.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 0, 2, 3, 3], "prerequisite": "(CS1010 or equivalent) and (CG2028 or CS2100 or EE2024 or EE2028)", "attributes": {"mpes1": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}], "vacancy": 65, "course": "Computer Science"}, {"moduleCode": "CS3240", "title": "Interaction Design", "description": "This course is intended for students in computing and related disciplines whose work focuses on human-computer interaction issues in the design of computer systems. The course stresses the importance of user-centred design and usability in the development of computer applications and systems. Students will be taken through the analysis, design, development, and evaluation of human-computer interaction methods for computer systems. They will acquire hands-on design skills through laboratory exercises and assignments. The course also covers HCI design principles and emphasizes the importance of contextual, organisational, and social factors in system design.", "moduleCredit": "4", "department": "Computer Science", "faculty": "Computing", "workload": [2, 1, 1, 3, 3], "prerequisite": "(CS1020 or its equivalent) or CS2020 or (CS2030 or its equivalent) or CS2113/T or NM3209 or NM2207/Y", "attributes": {"mpes1": true, "mpes2": true}, "semesterData": [{"semester": 1, "covidZones": ["Unknown"]}, {"semester": 2, "covidZones": ["Unknown"]}], "vacancy": 63, "course": "Computer Science"}]